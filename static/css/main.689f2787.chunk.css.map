{"version":3,"sources":["E:/projects/fakeArtits/live4ever/src/components/BaseLink/E:/projects/fakeArtits/live4ever/src/components/BaseLink/E:/projects/fakeArtits/live4ever/src/components/BaseLink/BaseLink.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/HamburgerButton.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/MainNav.scss","E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/Footer.scss","E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/HamburgerMenu.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/components/PageOverlay/PageOverlay.scss","E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/Counter.scss","E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/Landing.scss","E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/components/Pages/Pages.scss","E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Loader/E:/projects/fakeArtits/live4ever/src/components/Loader/E:/projects/fakeArtits/live4ever/src/components/Loader/Loader.scss","E:/projects/fakeArtits/live4ever/src/components/AvatarWebGL/E:/projects/fakeArtits/live4ever/src/components/AvatarWebGL/E:/projects/fakeArtits/live4ever/src/components/AvatarWebGL/AvatarWebGL.scss","E:/projects/fakeArtits/live4ever/src/components/AssetPreview/E:/projects/fakeArtits/live4ever/src/components/AssetPreview/E:/projects/fakeArtits/live4ever/src/components/AssetPreview/AssetPreview.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoPlayer.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoControls/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoControls/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoControls/VideoControls.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoControls/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoControls/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoTimeline/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoTimeline/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoTimeline/VideoTimeline.scss","E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoTimeline/E:/projects/fakeArtits/live4ever/src/components/VideoPlayer/VideoTimeline/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/MineNav.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/E:/projects/fakeArtits/live4ever/src/components/Mine/MineNav/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/WindowsHeader.scss","E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/AdBanner.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/LevelUp/E:/projects/fakeArtits/live4ever/src/components/LevelUp/E:/projects/fakeArtits/live4ever/src/components/LevelUp/LevelUp.scss","E:/projects/fakeArtits/live4ever/src/components/LevelUp/E:/projects/fakeArtits/live4ever/src/components/LevelUp/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Onboarding/E:/projects/fakeArtits/live4ever/src/components/Onboarding/E:/projects/fakeArtits/live4ever/src/components/Onboarding/Onboarding.scss","E:/projects/fakeArtits/live4ever/src/components/Onboarding/E:/projects/fakeArtits/live4ever/src/components/Onboarding/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Onboarding/E:/projects/fakeArtits/live4ever/src/components/Onboarding/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/Mine.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/components/Login/Login.scss","E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/fonts.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/global.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/polyfills.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/global.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/scalable-font-size.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/vars.scss"],"names":[],"mappings":"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","file":"main.689f2787.chunk.css","sourcesContent":["@import 'src/style/shared.scss';\n\n.BaseLink {\n  display: inline-block;\n}\n","@import 'src/style/shared.scss';\n\n$hamburger-button-width: 2.5rem !default;\n$hamburger-button-height: 2rem !default;\n$hamburger-button-bar-thickness: 2px !default;\n$hamburger-button-bar-color: $green !default;\n$hamburger-button-transition: 0.2s ease-out !default;\n\n.HamburgerButton {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n  padding: 10px 10px;\n  border: 1px solid $green;\n\n  .bars-container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: $hamburger-button-width;\n    height: $hamburger-button-height;\n\n    .bar {\n      width: 100%;\n      height: $hamburger-button-bar-thickness;\n      background: $hamburger-button-bar-color;\n      transform-origin: top left;\n      transition: transform $hamburger-button-transition, opacity $hamburger-button-transition;\n    }\n  }\n\n  &.close {\n    .bar {\n      &:nth-child(1) {\n        transform: translateX(4px) rotate(45deg);\n      }\n\n      &:nth-child(2) {\n        transform: scaleX(0);\n        opacity: 0;\n      }\n\n      &:nth-child(3) {\n        transform: translateX(3px) rotate(-45deg);\n      }\n    }\n  }\n\n  &.back {\n    .bar {\n      &:nth-child(1) {\n        transform: translateX(-1px) translateY(10px) rotate(-45deg) scaleX(0.8);\n      }\n\n      &:nth-child(2) {\n        transform: scaleX(0);\n        opacity: 0;\n      }\n\n      &:nth-child(3) {\n        transform: translateX(1px) translateY(-9px) rotate(45deg) scaleX(0.8);\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n$main-top-nav-height: 6rem !default;\n$main-top-nav-padding: 0 4rem !default;\n$main-top-nav-links-margin: 2rem !default;\n$main-top-nav-link-font-size: 2rem !default;\n\n.MainNav {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  min-width: $min-width;\n  background: transparent;\n  height: $navbar-height-mobile;\n  padding: 2rem $navbar-padding-mobile;\n  box-sizing: border-box;\n  z-index: 500;\n\n  .only-aria-visible {\n    clip-path: inset(100%);\n    clip: rect(1px 1px 1px 1px); /* IE 6/7 */\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n\n  .nav-mid-logo-cnt {\n    position: absolute;\n    top: $logo-size-top;\n    left: 50%;\n    display: inline-block;\n    width: $logo-size-width;\n    height: $logo-size-height;\n    margin-left: -$logo-size-half-width;\n\n    svg {\n      width: $logo-size-width;\n      height: $logo-size-height;\n    }\n  }\n\n  .nav-mid-logo {\n    display: inline-block;\n  }\n\n  .nav-mid-logo-text {\n    display: inline-block;\n    text-align: center;\n    width: 100%;\n\n    h1 {\n      margin: px-to-rem(5) 0 px-to-rem(5) -20%;\n      width: 140%;\n      @include font-light();\n      color: $pink;\n      font-size: px-to-rem(16);\n      line-height: px-to-rem(16);\n      text-align: center;\n    }\n\n    p {\n      margin: px-to-rem(5) 0;\n      @include font-h1;\n      color: $gray-tint;\n      font-size: px-to-rem(12);\n    }\n  }\n\n  .nav {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    height: 100%;\n    z-index: 501;\n\n    .nav-logo {\n      width: px-to-rem(200);\n    }\n\n    .nav-logo-text {\n      margin: px-to-rem(0) px-to-rem(10);\n      position: absolute;\n      color: $green;\n      font-size: px-to-rem(10);\n      line-height: px-to-rem(10);\n    }\n\n    .nav-list {\n      display: inline-block;\n\n      .nav-item {\n        margin-left: $main-top-nav-links-margin;\n        display: inline-block;\n        @include main-button;\n        padding: px-to-rem(13) px-to-rem(15) px-to-rem(11) px-to-rem(15);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n\n        &.active {\n          text-decoration: line-through;\n\n          &:hover {\n            background-color: transparent;\n            color: $green;\n            cursor: default;\n          }\n        }\n\n        &.active.login {\n          color: $black;\n          border: 1px $green solid;\n          background-color: $green;\n          text-decoration: none;\n\n          &:hover {\n            color: $green;\n            background-color: transparent;\n          }\n        }\n\n        a {\n          text-decoration: none;\n        }\n      }\n    }\n  }\n\n  @media (max-width: $layout-small) {\n    .nav-logo-container {\n      transform-origin: top left;\n      transform: scale(0.5) translateY(30px);\n    }\n\n    .nav-logo-text {\n      display: none;\n    }\n\n    .nav-mid-logo-cnt {\n      top: calc(#{$logo-size-top} / 0.6);\n      width: calc(#{$logo-size-width} * 0.6);\n      height: calc(#{$logo-size-height} * 0.6);\n      margin-left: calc(#{-$logo-size-half-width} * 0.6);\n\n      svg {\n        width: calc(#{$logo-size-width} * 0.6);\n        height: calc(#{$logo-size-height} * 0.6);\n      }\n    }\n\n    .nav {\n      .nav-list {\n        .nav-item {\n          @include main-button;\n          padding: px-to-rem(5) px-to-rem(5) px-to-rem(5) px-to-rem(5);\n          font-size: px-to-rem(12);\n        }\n      }\n    }\n  }\n\n  @media (min-width: $layout-large) {\n    height: $navbar-height-desktop;\n    padding: 2rem $navbar-padding-desktop;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n$main-footer-nav-padding: 0 4rem !default;\n$main-footer-links-margin: 2rem !default;\n$main-footer-link-font-size: 18px !default;\n$main-footer-link-color: $green !default;\n$main-footer-bg-color: transparent !default;\n$main-footer-copyright-color: $gray !default;\n$main-footer-copyright-font-size: 12px !default;\n\n.Footer {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: $footer-height-mobile;\n  padding: 5px $navbar-padding-mobile 2rem;\n  background: $main-footer-bg-color;\n  box-sizing: border-box;\n  text-align: center;\n  z-index: 500;\n\n  &.landing {\n    &::before {\n      position: absolute;\n      content: '';\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 150%;\n      background: rgb(0, 0, 0);\n      background: linear-gradient(0deg, rgba(0, 0, 0, 1) 80%, rgba(0, 0, 0, 0) 100%);\n    }\n  }\n\n  @media (min-width: $layout-medium) {\n    padding: 2rem $navbar-padding-desktop;\n    height: $footer-height-desktop;\n  }\n\n  @media (min-width: $layout-large) {\n    padding: 2rem $navbar-padding-desktop;\n    height: $footer-height-desktop;\n  }\n\n  .side-links {\n    position: absolute;\n    bottom: 3rem;\n    right: $navbar-padding-desktop;\n    display: none;\n\n    .side-link {\n      position: relative;\n      float: left;\n      color: $green;\n      font-size: px-to-rem(12);\n      text-decoration: none;\n      padding-left: px-to-rem(10);\n\n      &:hover {\n        color: $pink;\n      }\n    }\n\n    @media (min-width: $layout-large) {\n      display: block;\n    }\n  }\n\n  .footer-nav {\n    .nav-list {\n      padding-left: 0;\n      margin: 0 auto;\n      height: 105px;\n\n      .footer-image {\n        display: inline-block;\n        width: 90px;\n        height: 50px;\n\n        .footer-image-title {\n          position: relative;\n          float: left;\n          width: 100%;\n          @include font-light;\n          font-size: 14px;\n          color: $green;\n          text-align: center;\n        }\n\n        .footer-logo {\n          position: relative;\n          width: 90px;\n          height: 50px;\n          background: url('#{$base-image-path}logo_fake-artists.png') no-repeat;\n          background-size: 90px 50px;\n        }\n\n        .instagram-ico {\n          position: absolute;\n          top: -10px;\n          left: 50%;\n          transform: translateX(10%);\n\n          svg {\n            width: px-to-rem(40);\n            height: px-to-rem(40);\n          }\n\n          &:hover {\n            path {\n              fill: $pink;\n            }\n          }\n        }\n\n        .ticktok-ico {\n          position: absolute;\n          top: -10px;\n          left: 50%;\n          transform: translateX(-110%);\n\n          svg {\n            width: px-to-rem(40);\n            height: px-to-rem(40);\n          }\n\n          &:hover {\n            path {\n              stroke: $pink;\n            }\n          }\n        }\n      }\n\n      .nav-item {\n        display: inline-block;\n        font-size: $main-footer-link-font-size;\n        height: 100%;\n        vertical-align: middle;\n\n        &:last-of-type {\n          margin-right: 0;\n        }\n      }\n\n      a {\n        color: $main-footer-link-color;\n        text-decoration: none;\n\n        &:hover {\n          text-decoration: line-through;\n        }\n      }\n    }\n  }\n\n  .footer-copyright {\n    position: absolute;\n    left: 50px;\n    bottom: 20px;\n    font-size: $main-footer-copyright-font-size;\n    color: $main-footer-copyright-color;\n    margin: 2rem 0 0;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.HamburgerMenu {\n  position: fixed;\n  top: $navbar-height-mobile;\n  right: 0;\n  width: 100%;\n  height: calc(100% - #{$navbar-height-mobile});\n  background: $blacktint;\n  padding: px-to-rem(20);\n  transform: translateX(100%);\n  transition: 0.2s;\n  border-left: none;\n  z-index: 800;\n\n  @media (min-width: $layout-medium) {\n    max-width: px-to-rem(400);\n    border-left: 1px solid rgba($black, 0.3);\n  }\n\n  &.open {\n    transform: translateX(0%);\n  }\n\n  .nav-list {\n    width: 100%;\n\n    .nav-item {\n      display: block;\n      margin: px-to-rem(40) px-to-rem(20);\n\n      &:last-of-type {\n        margin-bottom: 0;\n      }\n\n      a {\n        font-size: px-to-rem(30);\n        color: $green;\n        text-decoration: none;\n\n        &.active {\n          color: $green;\n          text-decoration: line-through;\n        }\n\n        &:hover:not(.active) {\n          color: $pink;\n          text-decoration: none;\n        }\n      }\n    }\n  }\n\n  .side-links {\n    position: absolute;\n    left: 0;\n    bottom: px-to-rem(10);\n    margin: px-to-rem(40) px-to-rem(50);\n\n    .side-link {\n      font-size: px-to-rem(24);\n      color: $green;\n      text-decoration: none;\n\n      &:hover {\n        color: $pink;\n        text-decoration: none;\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n$page-overlay-bg-color: rgba(#000, 0.8) !default;\n$page-overlay-fade-transition: 0.2s;\n\n.PageOverlay {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  background-color: $page-overlay-bg-color;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity $page-overlay-fade-transition;\n  transition-delay: visibility $page-overlay-fade-transition;\n  @include z-index(page-overlay);\n\n  &.is-showing {\n    opacity: 1;\n    visibility: visible;\n    transition-delay: 0s;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Counter {\n  position: relative;\n  float: left;\n  width: 100%;\n  margin: px-to-rem(10) 0 px-to-rem(60) 0;\n\n  ul {\n    position: relative;\n    float: left;\n    left: 50%;\n    color: $green;\n    transform: translateX(-50%);\n    @include font-special();\n    font-size: px-to-rem(36);\n    line-height: px-to-rem(42);\n\n    @media (min-width: $min-width) {\n      font-size: 10vw;\n      line-height: 10vw;\n    }\n\n    li {\n      text-align: center;\n      position: relative;\n      float: left;\n\n      &.counter-dot {\n        color: $pink;\n        padding-left: px-to-rem(0);\n        padding-right: px-to-rem(0);\n      }\n\n      p {\n        color: $green;\n        margin: 0;\n      }\n\n      span {\n        position: absolute;\n        left: 0;\n        width: 100%;\n        text-align: center;\n        @include font-regular();\n\n        bottom: px-to-rem(-25);\n        font-size: px-to-rem(12);\n        line-height: px-to-rem(14);\n      }\n    }\n  }\n\n  @media (min-width: $layout-medium) {\n    margin: px-to-rem(50) 0 px-to-rem(120) 0;\n\n    ul {\n      font-size: px-to-rem(80);\n      line-height: px-to-rem(90);\n\n      li {\n        &.counter-dot {\n          padding-left: px-to-rem(5);\n          padding-right: px-to-rem(5);\n        }\n\n        span {\n          bottom: px-to-rem(-40);\n          font-size: px-to-rem(20);\n          line-height: px-to-rem(22);\n        }\n      }\n    }\n  }\n\n  @media (min-width: $layout-large) {\n    margin: px-to-rem(50) 0 px-to-rem(120) 0;\n\n    font-size: px-to-rem(100);\n    line-height: px-to-rem(120);\n\n    li {\n      &.counter-dot {\n        padding-left: px-to-rem(20);\n        padding-right: px-to-rem(20);\n      }\n\n      span {\n        bottom: px-to-rem(-40);\n        font-size: px-to-rem(20);\n        line-height: px-to-rem(22);\n      }\n    }\n  }\n\n  &.box {\n    margin: 0;\n    width: auto;\n    left: 50%;\n    transform: translateX(-50%);\n\n    @media (min-width: $layout-large) {\n      width: 100%;\n      left: auto;\n      transform: none;\n    }\n\n    ul {\n      position: relative;\n      float: left;\n      width: 100%;\n      left: 0;\n      transform: none;\n\n      li {\n        position: relative;\n        float: left;\n        padding: 0;\n        margin: 0;\n        height: px-to-rem(28);\n        font-size: px-to-rem(24);\n        line-height: px-to-rem(24);\n        color: $green;\n\n        p {\n          height: px-to-rem(28);\n        }\n\n        &.counter-dot {\n          color: $pink;\n        }\n\n        span {\n          color: $gray-tint;\n          bottom: px-to-rem(-24);\n          font-size: px-to-rem(10);\n          line-height: px-to-rem(10);\n        }\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.Landing {\n  box-sizing: border-box;\n  position: relative;\n  float: left;\n  width: 100%;\n  padding: px-to-rem(20) 0;\n  margin-top: $navbar-height-mobile;\n  height: calc(100vh - #{$navbar-height-mobile} - #{$footer-height-mobile});\n  min-height: 350px;\n  z-index: 600;\n\n  .landing-container {\n    box-sizing: border-box;\n    margin: 0;\n    position: absolute;\n    width: 100%;\n    top: 50%;\n    transform: translateY(-50%);\n    text-align: center;\n    min-width: $min-width;\n    pointer-events: none;\n\n    h1 {\n      position: relative;\n      float: left;\n      width: 100%;\n      @include font-regular();\n      color: $green;\n      font-size: px-to-rem(30);\n      line-height: px-to-rem(30);\n      padding: 0 px-to-rem(20);\n\n      span {\n        position: relative;\n        float: left;\n        width: 100%;\n        text-align: center;\n        padding: px-to-rem(5) 0;\n      }\n\n      b {\n        font-weight: normal;\n        color: $pink;\n      }\n    }\n\n    .Counter {\n      margin-top: 3vh;\n      margin-bottom: 12vh;\n    }\n\n    .landing-button {\n      @include main-button-cta;\n      position: relative;\n      float: left;\n      text-decoration: none;\n      left: 50%;\n      transform: translateX(-50%);\n      margin-bottom: px-to-rem(70);\n      pointer-events: auto;\n    }\n\n    @media (min-height: 1024px) {\n      .landing-button {\n        margin-bottom: px-to-rem(40);\n      }\n    }\n\n    @media (max-width: $layout-medium) {\n      padding-top: px-to-rem(20);\n\n      h1 {\n        font-size: px-to-rem(20);\n        line-height: px-to-rem(20);\n\n        span {\n          padding: px-to-rem(5) 0;\n        }\n      }\n\n      .landing-button {\n        transform: scale(0.9) translateX(-50%);\n        margin-bottom: px-to-rem(20);\n      }\n    }\n  }\n\n  @media (min-width: $layout-medium) {\n    min-height: 400px;\n  }\n\n  @media (min-width: $layout-large) {\n    height: calc(100vh - #{$navbar-height-desktop} - #{$footer-height-desktop});\n    padding: px-to-rem(20) 0;\n    margin-top: $navbar-height-desktop;\n    min-height: 500px;\n\n    .landing-container {\n      h1 {\n        font-size: px-to-rem(36);\n        line-height: px-to-rem(36);\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.Pages {\n  position: relative;\n  text-align: center;\n  margin-top: $navbar-height-mobile;\n  flex: 1;\n  z-index: 100;\n\n  @media (min-width: $layout-large) {\n    margin-top: $navbar-height-desktop;\n  }\n\n  & > section {\n    padding-bottom: px-to-rem(40);\n    width: 100%;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Loader {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: $black;\n  z-index: 9994;\n\n  @media (min-width: $layout-large) {\n  }\n\n  .loader-image {\n    position: absolute;\n    background: url('#{$base-image-path}pyramid_loader_small.gif');\n    background-repeat: no-repeat;\n    width: 150px;\n    height: 107px;\n    left: 50%;\n    bottom: 50vh;\n    margin: 0 0 -52px -75px;\n    z-index: 9995;\n  }\n\n  .loader-bg {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 0%;\n    overflow: hidden;\n  }\n\n  .loader-bg.black {\n    background-color: $black;\n    z-index: 9999;\n  }\n\n  .loader-bg.green {\n    background-color: $green;\n    z-index: 9997;\n  }\n\n  .loader-bg.pink {\n    background-color: $pink;\n    z-index: 9996;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.AvatarWebGL {\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 0;\n  //background-color: transparent;\n\n  canvas {\n    position: absolute;\n    overflow: hidden;\n    top: 0;\n    left: 0;\n    //background-color: transparent;\n  }\n}\n\n.dg.ac {\n  z-index: 100000 !important;\n}\n","@import 'src/style/shared.scss';\n\n.AssetPreview {\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 700;\n\n  .webgl-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: $blacktint-dark;\n    z-index: 700;\n  }\n\n  .webgl-container {\n    position: absolute;\n    width: 80%;\n    height: 80%;\n    top: 10%;\n    left: 10%;\n    background-color: $white;\n    z-index: 701;\n  }\n}\n","@import 'src/style/shared.scss';\n\n$video-player-fullscreen-bg-color: #000 !default;\n$video-player-captions-bottom-pos: 8rem !default;\n$video-player-captions-bottom-collapsed-pos: 3rem !default;\n$video-player-captions-font-size: 3rem !default;\n$video-player-captions-font-weight: bold !default;\n$video-player-captions-bg-color: rgba(0, 0, 0, 0.8) !default;\n$video-player-captions-text-color: $green !default;\n$video-player-captions-max-width: 50rem !default;\n$video-player-captions-padding: 1rem !default;\n$video-player-controls-transition: 0.2s;\n\n.VideoPlayer {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  &.intro-video {\n    background-color: $black;\n    position: fixed;\n    z-index: 999;\n  }\n\n  .BackgroundVideo {\n    video {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  &:fullscreen {\n    width: 100% !important;\n    height: 100% !important;\n    background-color: $video-player-fullscreen-bg-color;\n\n    .BackgroundVideo {\n      display: flex;\n    }\n\n    video {\n      position: relative !important;\n      width: 100% !important;\n      height: auto !important;\n      left: 0 !important;\n      top: 0 !important;\n    }\n\n    button.close {\n      opacity: 0;\n    }\n  }\n\n  &-captions-container {\n    position: absolute;\n    left: 50%;\n    bottom: $video-player-captions-bottom-collapsed-pos;\n    background-color: $video-player-captions-bg-color;\n    transform: translateX(-50%);\n    color: $video-player-captions-text-color;\n    transition: $video-player-controls-transition;\n    visibility: hidden;\n\n    p {\n      margin: 0;\n      font-size: $video-player-captions-font-size;\n      font-weight: $video-player-captions-font-weight;\n      padding: $video-player-captions-padding;\n      max-width: $video-player-captions-max-width;\n      text-align: center;\n    }\n  }\n\n  .VideoControls {\n    transform: translateY(100%);\n    transition: $video-player-controls-transition;\n  }\n\n  &.show-captions {\n    .VideoPlayer-captions-container {\n      visibility: visible;\n    }\n  }\n\n  &.show-controls {\n    .VideoControls {\n      transform: translateY(0%);\n    }\n\n    .VideoPlayer-captions-container {\n      bottom: $video-player-captions-bottom-pos;\n    }\n  }\n\n  .button_skip {\n    position: absolute;\n    top: px-to-rem(30);\n    right: px-to-rem(30);\n    @include borderless-button;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n$video-player-controls-buttons-margin: 2rem !default;\n$video-player-controls-buttons-width: 2rem !default;\n$video-player-controls-buttons-height: 2rem !default;\n$video-player-controls-height: 5rem !default;\n$video-player-controls-bg-color: #000 !default;\n$video-player-controls-timer-color: #fff !default;\n$video-player-controls-timer-width: 4rem !default;\n$video-player-controls-timer-font-size: 1.5rem !default;\n\n.VideoControls {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  height: $video-player-controls-height;\n  background-color: $video-player-controls-bg-color;\n  z-index: 1;\n  box-sizing: border-box;\n\n  &-button {\n    width: $video-player-controls-buttons-width;\n    height: $video-player-controls-buttons-height;\n    margin-left: $video-player-controls-buttons-margin;\n    border: none;\n    cursor: pointer;\n    background: transparent;\n    padding: 0;\n    text-align: inherit;\n    letter-spacing: inherit;\n    font-size: inherit;\n    text-transform: inherit;\n    color: inherit;\n    outline: none;\n\n    svg {\n      fill: $green;\n      width: 100%;\n      height: 100%;\n\n      path {\n        fill: $green;\n      }\n\n      rect {\n        fill: $green;\n      }\n    }\n\n    &:first-of-type {\n      margin-right: $video-player-controls-buttons-margin;\n    }\n\n    &:last-of-type {\n      margin-right: $video-player-controls-buttons-margin;\n    }\n\n    img {\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover {\n      svg {\n        fill: $pink;\n\n        path {\n          fill: $pink;\n        }\n\n        rect {\n          fill: $pink;\n        }\n      }\n    }\n  }\n\n  &-time {\n    width: $video-player-controls-timer-width;\n    color: $video-player-controls-timer-color;\n    font-size: $video-player-controls-timer-font-size;\n    margin-left: $video-player-controls-buttons-margin;\n    color: $green;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n$video-player-controls-height: 4px !default;\n$video-player-controls-thumb-size: 1rem !default;\n$video-player-controls-bg-color: $green !default;\n$video-player-controls-track-color: rgba($video-player-controls-bg-color, 0.3) !default;\n$video-player-controls-bg-color-hover: $pink !default;\n\n@mixin track() {\n  width: 100%;\n  height: $video-player-controls-height;\n  background-color: $video-player-controls-track-color;\n  cursor: pointer;\n  border: none;\n  outline: none;\n  color: transparent;\n}\n\n@mixin thumb() {\n  width: $video-player-controls-thumb-size;\n  height: $video-player-controls-thumb-size;\n  background: $video-player-controls-bg-color;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n}\n\n.VideoTimeline {\n  display: flex;\n  align-items: center;\n  position: relative;\n  height: $video-player-controls-height;\n  flex-grow: 1;\n\n  &-progress {\n    position: absolute;\n    height: $video-player-controls-height;\n    background-color: $video-player-controls-bg-color;\n  }\n\n  input {\n    margin: 0;\n  }\n\n  input[type='range']::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n\n  input[type='range']::-moz-focus-outer {\n    border: 0;\n  }\n\n  input[type='range']:focus {\n    border: none;\n  }\n\n  input[type='range'] {\n    -webkit-appearance: none;\n    position: absolute;\n    width: 100%;\n    height: $video-player-controls-height;\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n    cursor: pointer;\n    padding: 0;\n    outline: none;\n\n    // track\n    &::-webkit-slider-runnable-track {\n      @include track;\n    }\n\n    &::-moz-range-track {\n      @include track;\n    }\n\n    &::-ms-track {\n      @include track;\n    }\n\n    &::-ms-tooltip {\n      display: none;\n    }\n\n    &::-ms-fill-lower {\n      background: transparent;\n    }\n\n    &::-ms-fill-upper {\n      background: transparent;\n    }\n\n    // thumb\n    &::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      @include thumb;\n      margin-top: -$video-player-controls-thumb-size/2.6;\n    }\n\n    &::-moz-range-thumb {\n      @include thumb;\n    }\n\n    &::-ms-thumb {\n      @include thumb;\n    }\n  }\n\n  &:hover {\n    .VideoTimeline-progress {\n      background-color: $video-player-controls-bg-color-hover;\n    }\n\n    input[type='range'] {\n      &::-webkit-slider-thumb {\n        background: $video-player-controls-bg-color-hover;\n      }\n\n      &::-moz-range-thumb {\n        background: $video-player-controls-bg-color-hover;\n      }\n\n      &::-ms-thumb {\n        background: $video-player-controls-bg-color-hover;\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.MineNav {\n  position: fixed;\n  width: calc(100% - 1px);\n  top: 0; //$navbar-height-mobile;\n  margin-top: 0; //px-to-rem(20);\n  left: 0;\n  z-index: 999;\n\n  .mine-info {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    padding: px-to-rem(15);\n    border: 1px solid $pink;\n    color: $pink;\n    background: $blacktint-dark;\n    overflow: hidden;\n    z-index: 999;\n\n    &::before {\n      content: '';\n      position: absolute;\n      width: 50%;\n      height: 90px;\n      left: 25%;\n      top: -50px;\n      background: radial-gradient(50% 50% at 50% 50%, #05ff0077 0%, rgba(0, 0, 0, 0) 100%);\n    }\n\n    &::after {\n      content: '';\n      position: absolute;\n      width: 50%;\n      height: 90px;\n      left: 25%;\n      bottom: -50px;\n      background: radial-gradient(50% 50% at 50% 50%, #fa00ff77 0%, rgba(0, 0, 0, 0) 100%);\n    }\n  }\n\n  .mine-promo {\n    position: absolute;\n    width: 100%;\n    height: 70px;\n    bottom: -70px;\n    background-color: $green;\n    color: $pink;\n    z-index: 998;\n    font-size: px-to-rem(14);\n\n    p {\n      position: relative;\n      float: left;\n      margin: px-to-rem(15) px-to-rem(5) px-to-rem(14) px-to-rem(20);\n    }\n\n    .mine-promo-link {\n      position: relative;\n      float: left;\n      margin: px-to-rem(15) 0;\n      text-transform: uppercase;\n      text-decoration: none;\n\n      &:hover {\n        color: $blacktint-dark;\n      }\n    }\n\n    .mine-promo-close {\n      position: absolute;\n      top: 0;\n      right: 0;\n      margin: px-to-rem(15) px-to-rem(20);\n      background: none;\n      cursor: pointer;\n      color: $pink;\n      border: none;\n\n      &:hover {\n        color: $blacktint-dark;\n      }\n    }\n  }\n\n  @media (min-width: $layout-large) {\n    top: 0; //$navbar-height-desktop;\n    margin-top: 0; //px-to-rem(20);\n  }\n\n  .label {\n    font-size: px-to-rem(12);\n\n    &.user {\n      font-size: px-to-rem(18);\n    }\n  }\n\n  .digits {\n    @include font-special();\n    font-size: px-to-rem(16);\n    padding: 0 px-to-rem(20);\n\n    &.user {\n      font-size: px-to-rem(24);\n    }\n  }\n\n  .delta {\n    @include font-special();\n    font-size: px-to-rem(16);\n\n    &.user {\n      font-size: px-to-rem(24);\n    }\n  }\n\n  .time-left-wrapper {\n    position: absolute;\n    left: 6%;\n    color: $green;\n    margin-top: px-to-rem(5);\n  }\n\n  .rank-wrapper {\n    position: absolute;\n    right: 6%;\n    margin-top: px-to-rem(5);\n\n    .rank-count {\n      position: relative;\n      float: right;\n    }\n\n    .rank-bid {\n      position: relative;\n      float: right;\n      margin-right: px-to-rem(24);\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.WindowsHeader {\n  position: relative;\n  float: left;\n  width: 100%;\n  height: 30px;\n  border-bottom: 1px solid $green;\n  background: $black;\n  user-select: none;\n\n  ul {\n    position: relative;\n    float: left;\n    width: 100%;\n    height: 100%;\n\n    li {\n      position: relative;\n      float: right;\n      height: 100%;\n      width: 30px;\n      border-bottom: 2px solid $gray-tint;\n      border-right: 2px solid $gray-tint;\n      border-top: 2px solid $green;\n      border-left: 2px solid $green;\n      background: $black;\n      color: $green;\n      font-size: 18px;\n      text-align: center;\n      vertical-align: middle;\n      user-select: none;\n\n      &.windows-header-windows {\n        &::before {\n          position: absolute;\n          content: '';\n          border: 2px solid $gray-tint;\n          width: 16px;\n          height: 12px;\n          left: 7px;\n          top: 5px;\n          z-index: 901;\n        }\n\n        &::after {\n          position: absolute;\n          content: '';\n          border: 2px solid $green;\n          width: 16px;\n          height: 12px;\n          left: 5px;\n          top: 7px;\n          z-index: 902;\n        }\n      }\n\n      &.windows-header-close {\n        line-height: 30px;\n      }\n\n      &.active {\n        cursor: pointer;\n\n        &:hover {\n          background: $greentint-dark;\n          color: $green;\n\n          &::after {\n            border: 2px solid $green;\n          }\n        }\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.Adbanner {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  z-index: 900;\n\n  .Adbanner-wrapper {\n    width: 100%;\n    height: 100%;\n  }\n\n  .Adbanner-content {\n    position: relative;\n    float: left;\n    width: 100%;\n    height: calc(100% - 30px);\n    margin: 0 auto;\n    text-align: center;\n    overflow: hidden;\n    background: $black;\n    background-position: center center;\n    color: $green;\n\n    img {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      object-position: center center;\n      min-height: 100%;\n      min-width: 100%;\n      filter: brightness(50%);\n      user-select: none;\n      z-index: 0;\n    }\n\n    canvas {\n      width: 100%;\n      height: 100%;\n      object-fit: none;\n      object-position: center;\n      min-height: 100%;\n      min-width: 100%;\n      user-select: none;\n    }\n\n    .Adbanner-data {\n      position: relative;\n      float: left;\n      width: 100%;\n      top: 50%;\n      transform: translateY(-50%);\n      z-index: 1;\n\n      span {\n        @include font-banner();\n        position: relative;\n        float: left;\n        z-index: 1;\n        width: 100%;\n        font-size: 30px;\n        cursor: default;\n        user-select: none;\n        padding: px-to-rem(5) px-to-rem(30);\n        margin-bottom: px-to-rem(30);\n\n        b {\n          font-weight: bold;\n        }\n\n        &.center {\n          margin-bottom: 0;\n        }\n      }\n\n      button {\n        position: relative;\n        float: left;\n        @include ad-button;\n      }\n    }\n\n    .test {\n      filter: brightness(50%);\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.LevelUp {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  z-index: 9990;\n  overflow: hidden;\n\n  .level-emoji {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 9993;\n\n    .emoji {\n      position: absolute;\n      width: 320px;\n      height: 320px;\n      top: 0;\n      left: 0;\n      background-image: url('/assets/images/emojis.png');\n      background-repeat: no-repeat;\n      background-position: 0 0;\n      transform: translate3d(0, 0, 0) scale(1);\n    }\n  }\n\n  .level-message {\n    position: absolute;\n    width: 100vw;\n    height: 40vw;\n    max-width: 400px;\n    max-height: 280px;\n    top: 50%;\n    left: 50%;\n    background: $black;\n    transform: translate(-50%, -50%);\n    border: 1px solid $green;\n    z-index: 9999;\n\n    p {\n      position: absolute;\n      width: 100%;\n      padding: 0 px-to-rem(30);\n      margin: 0;\n      top: 50%;\n      @include font-banner();\n      -webkit-text-stroke: 2px $pink;\n      font-size: px-to-rem(30);\n      color: $white;\n      transform: translateY(-50%);\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Onboarding {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  z-index: 9995;\n  overflow: hidden;\n\n  .onboarding-message {\n    position: absolute;\n    width: 100vw;\n    max-width: 800px;\n    max-height: 560px;\n    top: 56%;\n    left: 50%;\n    background: $black;\n    transform: translate(-50%, -50%);\n    border: 1px solid $green;\n    z-index: 9999;\n\n    h1 {\n      position: relative;\n      float: left;\n      width: 100%;\n      padding: 0 px-to-rem(30);\n      margin: 0;\n      @include font-title();\n      font-weight: 100;\n      font-size: px-to-rem(20);\n      color: $pink;\n      text-transform: uppercase;\n      text-align: center;\n\n      margin: px-to-rem(20) 0 px-to-rem(20) 0;\n    }\n\n    p {\n      position: relative;\n      float: left;\n      text-align: center;\n      width: 100%;\n      padding: 0 px-to-rem(30);\n      margin: 0;\n      @include font-regular();\n      font-weight: 100;\n      font-size: px-to-rem(18);\n      color: $white;\n\n      margin: px-to-rem(20) 0 px-to-rem(20) 0;\n\n      b {\n        color: $green;\n        text-transform: uppercase;\n      }\n    }\n\n    .action-button {\n      position: relative;\n      float: left;\n      @include main-button-cta;\n      text-transform: uppercase;\n      text-decoration: none;\n      padding-left: px-to-rem(40);\n      padding-right: px-to-rem(40);\n      min-width: 100px;\n      max-width: 280px;\n      left: 50%;\n      transform: translateX(-50%);\n\n      margin: px-to-rem(20) 0 px-to-rem(30) 0;\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.Mine {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  z-index: 900;\n  background: $blacktint-dark;\n  padding: px-to-rem(20) $navbar-padding-mobile;\n\n  @media (min-width: $layout-large) {\n    padding: px-to-rem(20) $navbar-padding-desktop;\n  }\n\n  .mine-close {\n    position: absolute;\n    bottom: px-to-rem(40);\n    right: px-to-rem(40);\n    @include main-button;\n    background-color: $black;\n    cursor: pointer;\n    z-index: 910;\n  }\n\n  .mine-container {\n    position: absolute;\n    top: calc(#{$navbar-height-mobile} - 80px);\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 900;\n  }\n\n  .Adbanner {\n    width: auto;\n    height: auto;\n    z-index: 900;\n  }\n\n  .Adbanner-wrapper {\n    display: inline-block;\n    border: 1px solid $green;\n    z-index: 900;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Login {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: transparent;\n  z-index: 980;\n  overflow: hidden;\n\n  .login-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: $blacktint;\n    width: 100%;\n    height: 100%;\n  }\n\n  .login-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    background-color: $black;\n    border: 1px solid $green;\n    width: 80%;\n    max-width: 400px;\n    transform: translate(-50%, -50%);\n\n    .login-info {\n      position: relative;\n      float: left;\n      width: 100%;\n\n      h1 {\n        font-size: px-to-rem(20);\n        line-height: px-to-rem(24);\n        color: $pink;\n        @include font-title();\n        text-align: center;\n        padding: px-to-rem(40) px-to-rem(20);\n        margin: 0;\n\n        &.logout {\n          padding: px-to-rem(50) px-to-rem(20) 0 px-to-rem(20);\n        }\n      }\n\n      p {\n        font-size: px-to-rem(14);\n        line-height: px-to-rem(16);\n        color: $green;\n        @include font-light();\n        text-align: center;\n        padding: px-to-rem(0) px-to-rem(40);\n        margin: 0;\n      }\n    }\n\n    .login-bt-container {\n      position: relative;\n      float: left;\n      width: 100%;\n      padding: px-to-rem(40) px-to-rem(20) px-to-rem(50) px-to-rem(20);\n    }\n\n    .login-bt {\n      position: relative;\n      float: left;\n      left: 50%;\n      transform: translateX(-50%);\n      text-align: center;\n      background-color: $green !important;\n      color: $black !important;\n      font-family: 'Aldrich' !important;\n\n      span {\n        padding: 12px 18px 10px 10px !important;\n      }\n\n      &:hover {\n        background-color: $pink !important;\n        color: $black !important;\n      }\n\n      &:disabled {\n        opacity: 0.2 !important;\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","// Fonts\n//\n// Location of all the font-families and font-related css\n//\n// Best practices:\n// 1. Avoid load as many fonts as possible, e.x font styles, font families\n// 2. Optimize the font, remove the characters set that the site won't use: languages\n// 3. Include the unicode range in case you couldn't remove the characters. Included just Latin by default\n// 4. Change fonts just changing the font-weight\n\n@import 'vars.scss';\n\n$base-path: '../assets/fonts/';\n\n@font-face {\n  font-family: 'Aldrich';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}Aldrich/aldrich-v11-latin-regular.woff') format('woff'),\n    url('#{$base-path}Aldrich/aldrich-v11-latin-regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: 'Orbitron';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}Orbitron/Orbitron-Regular.woff') format('woff'),\n    url('#{$base-path}Orbitron/Orbitron-Regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: 'Mitr';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}Mitr/Mitr-Regular.woff') format('woff'),\n    url('#{$base-path}Mitr/Mitr-Regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: 'DigitalNumbers';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}DigitalNumbers/DigitalNumbers-Regular.woff') format('woff'),\n    url('#{$base-path}DigitalNumbers/DigitalNumbers-Regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n","@font-face {\n  font-family: 'Aldrich';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/Aldrich/aldrich-v11-latin-regular.woff\") format(\"woff\"), url(\"../assets/fonts/Aldrich/aldrich-v11-latin-regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n@font-face {\n  font-family: 'Orbitron';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/Orbitron/Orbitron-Regular.woff\") format(\"woff\"), url(\"../assets/fonts/Orbitron/Orbitron-Regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n@font-face {\n  font-family: 'Mitr';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/Mitr/Mitr-Regular.woff\") format(\"woff\"), url(\"../assets/fonts/Mitr/Mitr-Regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n@font-face {\n  font-family: 'DigitalNumbers';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/DigitalNumbers/DigitalNumbers-Regular.woff\") format(\"woff\"), url(\"../assets/fonts/DigitalNumbers/DigitalNumbers-Regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n[hidden] {\n  display: none !important; }\n\nhtml {\n  box-sizing: border-box;\n  font-family: \"Aldrich\", Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-overflow-scrolling: touch;\n  font-size: 10px;\n  min-width: 280px; }\n  @media (min-width: 1200px) and (max-width: 1200px) {\n    html {\n      font-size: 10px; } }\n  @media (min-width: 1200px) {\n    html {\n      font-size: 0.83333vw; } }\n  @media (min-width: 1920px) {\n    html {\n      font-size: 16px; } }\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  font-size: 1.6rem;\n  background-color: #000; }\n  body.rotate-screen-visible {\n    background-color: #000 !important; }\n\n#root {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh; }\n  #root .lines-bg {\n    position: fixed;\n    height: calc((100vh - 225px) / 2);\n    top: 65px;\n    z-index: 5;\n    min-width: 350px; }\n  #root .lines-bg-inv {\n    position: absolute;\n    bottom: calc(180px - 20px);\n    height: calc((100vh - 224px) / 2);\n    z-index: 5;\n    transform: scale(1, -1);\n    min-width: 350px; }\n    @media (max-width: 550px) {\n      #root .lines-bg-inv {\n        bottom: calc(130px);\n        height: calc((100vh - 164px) / 2); } }\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit; }\n\n.only-aria-visible {\n  clip-path: inset(100%);\n  clip: rect(1px 1px 1px 1px);\n  /* IE 6/7 */\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  /* added line */\n  width: 1px; }\n\na {\n  color: inherit; }\n\nul,\ndl,\nol {\n  margin: 0;\n  padding: 0;\n  list-style: none; }\n\nli,\ndt,\ndd {\n  margin: 0;\n  padding: 0; }\n","// Polyfills\n//\n// Used to write down all the cross browser code\n\n[hidden] {\n  display: none !important;\n}\n","// Globals\n//\n// Global styling, normalize overwritten\n@import 'fonts.scss';\n@import 'polyfills.scss';\n@import 'shared.scss';\n@import 'scalable-font-size.scss';\n\nhtml {\n  box-sizing: border-box;\n  @include font-regular;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-overflow-scrolling: touch;\n  @include scalable-font();\n\n  min-width: 280px;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  font-size: px-to-rem(16);\n  background-color: $black;\n\n  &.rotate-screen-visible {\n    background-color: $rotate-screen-bg-color !important; // trick to avoid the iPhone X notch\n  }\n}\n\n#root {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n\n  .lines-bg {\n    position: fixed;\n    height: calc((100vh - 225px) / 2);\n    top: 65px;\n    z-index: 5;\n    min-width: $min-width;\n  }\n\n  .lines-bg-inv {\n    position: absolute;\n    bottom: calc(#{$footer-height-desktop} - 20px);\n    height: calc((100vh - 224px) / 2);\n    z-index: 5;\n    transform: scale(1, -1);\n    min-width: $min-width;\n\n    @media (max-width: $layout-small) {\n      bottom: calc(#{$footer-height-mobile});\n      height: calc((100vh - 164px) / 2);\n    }\n  }\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n.only-aria-visible {\n  clip-path: inset(100%);\n  clip: rect(1px 1px 1px 1px); /* IE 6/7 */\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap; /* added line */\n  width: 1px;\n}\n\na {\n  color: inherit;\n}\n\nul,\ndl,\nol {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nli,\ndt,\ndd {\n  margin: 0;\n  padding: 0;\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-banner() {\n  font-family: 'Mitr', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  background-color: transparent;\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin title-mobile {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $white;\n  background-color: $pink;\n  font-size: px-to-rem(30);\n  line-height: px-to-rem(50);\n  text-align: center;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin borderless-button {\n  background-color: transparent; //$black;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 24px;\n  padding: px-to-rem(8) px-to-rem(20) px-to-rem(6) px-to-rem(20);\n  background-color: $gray;\n  color: $white;\n  border-top: 3px solid $tint-light;\n  border-right: 3px solid $tint-dark;\n  border-bottom: 3px solid $tint-dark;\n  border-left: 3px solid $tint-light;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $gray;\n    color: $black;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $black;\n  }\n}\n","@import 'shared.scss';\n\n$default-font-size-percent: 62.5;\n$default-font-size-px: 10;\n\n// we need to convert percentages so that html font size is set in px, otherwise Safari won't scale below 9px ignoring %\n$percent-to-px-multiplier: $default-font-size-px / $default-font-size-percent;\n\n// ====================================================================\n// RANGES\n// HTML font size will proportionately scale up or down within the allowed range\n// ====================================================================\n\n// below this size we lock font size at its min\n$min-scale-size: map-get($layout, large);\n\n// above this size we lock font size at its max\n$max-scale-size: map-get($layout, xlarge);\n\n// only at this exact screen resolution pixel values will match designs\n// If $base-design-width > $min-scale-size it will scale down in that range, by default they are equal\n$base-design-width: map-get($layout, large);\n\n// ====================================================================\n// CALCULATED VALUES\n// ====================================================================\n$scale: $min-scale-size / $base-design-width;\n\n@mixin scalable-font() {\n  font-size: #{$default-font-size-px}px;\n\n  @media (min-width: $layout-large) and (max-width: #{$min-scale-size}px) {\n    // lock font size for min range limit\n    $font-size: $default-font-size-percent * $scale;\n    font-size: #{$font-size * $percent-to-px-multiplier}px;\n  }\n\n  @media (min-width: #{$min-scale-size}px) {\n    // proportionately scale font size within range\n    $font-size: $default-font-size-percent / $min-scale-size * $scale * 100;\n    font-size: #{$font-size * $percent-to-px-multiplier}vw;\n  }\n\n  @media (min-width: #{$max-scale-size}px) {\n    // lock font size for max range limit\n    $font-size: $default-font-size-percent / $min-scale-size * $max-scale-size * $scale;\n    font-size: #{$font-size * $percent-to-px-multiplier}px;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$whitetint: rgba(255, 255, 255, 0.4);\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#429900, 0.5);\n\n$pink: #fa00ff;\n$gray-tint: rgba(255, 255, 255, 0.3);\n$gray: rgba(255, 255, 255, 1);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n$tint-dark: rgba(#000000, 0.2);\n$tint-light: rgba(#ffffff, 0.8);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n"]}