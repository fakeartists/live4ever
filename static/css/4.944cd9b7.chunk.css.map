{"version":3,"sources":["E:/projects/fakeArtits/live4ever/src/components/BoxInfo/E:/projects/fakeArtits/live4ever/src/components/BoxInfo/E:/projects/fakeArtits/live4ever/src/components/BoxInfo/BoxInfo.scss","E:/projects/fakeArtits/live4ever/src/components/BoxInfo/E:/projects/fakeArtits/live4ever/src/components/BoxInfo/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/BoxInfo/E:/projects/fakeArtits/live4ever/src/components/BoxInfo/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Leaderboard/E:/projects/fakeArtits/live4ever/src/components/Leaderboard/E:/projects/fakeArtits/live4ever/src/components/Leaderboard/Leaderboard.scss","E:/projects/fakeArtits/live4ever/src/components/Leaderboard/E:/projects/fakeArtits/live4ever/src/components/Leaderboard/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Leaderboard/E:/projects/fakeArtits/live4ever/src/components/Leaderboard/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/pages/Asset/E:/projects/fakeArtits/live4ever/src/pages/Asset/E:/projects/fakeArtits/live4ever/src/pages/Asset/Asset.scss","E:/projects/fakeArtits/live4ever/src/pages/Asset/E:/projects/fakeArtits/live4ever/src/pages/Asset/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/pages/Asset/E:/projects/fakeArtits/live4ever/src/pages/Asset/E:/projects/fakeArtits/live4ever/src/style/mixins.scss"],"names":[],"mappings":"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","file":"4.944cd9b7.chunk.css","sourcesContent":["@import 'src/style/shared.scss';\n\n.box-info {\n  width: 100%;\n  box-sizing: border-box;\n  height: calc(100% - 6rem);\n\n  .box-info-bid {\n    display: flex;\n    flex-direction: row;\n    align-content: stretch;\n    height: 100%;\n  }\n\n  .box-info-asset {\n    @include font-light();\n    width: 100%;\n\n    li {\n      margin: px-to-rem(20) 0 0 0;\n      list-style: none;\n\n      ul {\n        width: 100%;\n        position: relative;\n        float: left;\n        text-align: left;\n\n        h1 {\n          position: relative;\n          float: left;\n          color: $white;\n          width: 10%;\n          min-width: 130px;\n          font-size: px-to-rem(10);\n          line-height: px-to-rem(20);\n          margin: 0;\n        }\n\n        p {\n          position: relative;\n          float: left;\n          width: 60%;\n          color: $green;\n          font-size: px-to-rem(10);\n          line-height: px-to-rem(20);\n          margin: 0;\n        }\n      }\n    }\n  }\n\n  .box-info-image {\n    width: 30%;\n    background-position: center center;\n    overflow: hidden;\n\n    img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      object-position: center;\n      min-height: 100%;\n      min-width: 100%;\n    }\n  }\n\n  .box-info-data {\n    width: 70%;\n    padding: 0 px-to-rem(20) 0 px-to-rem(30);\n\n    .box-info-data-title {\n      @include font-title();\n      position: relative;\n      float: left;\n      width: 100%;\n      font-weight: 100;\n      text-align: left;\n      box-sizing: border-box;\n      font-size: px-to-rem(30);\n      margin: px-to-rem(-5) 0 px-to-rem(5) 0;\n    }\n\n    .box-info-data-edition,\n    .box-info-desc,\n    .box-info-status-top-title,\n    .box-info-status-bid-title {\n      position: relative;\n      float: left;\n      width: 100%;\n      color: $white;\n      text-align: left;\n      font-size: px-to-rem(10);\n      margin: 0;\n    }\n\n    .box-info-desc {\n      margin: px-to-rem(20) 0 px-to-rem(20) 0;\n    }\n\n    .box-info-status {\n      position: relative;\n      float: left;\n    }\n\n    .box-info-status-top {\n      position: relative;\n      float: left;\n      width: 100%;\n      margin-top: 10px;\n\n      .box-info-box {\n        position: relative;\n        float: left;\n        height: 100px;\n        max-width: 50%;\n        box-sizing: border-box;\n        border-left: 1px solid $white;\n        padding-left: px-to-rem(30);\n        padding-right: px-to-rem(30);\n\n        &:first-child {\n          border-left: none;\n          padding-left: 0;\n        }\n\n        &:last-child {\n          max-width: 80%;\n          padding-right: 0;\n        }\n\n        p {\n          float: none;\n        }\n\n        &.single {\n          max-width: 80%;\n        }\n      }\n\n      .box-info-status-top-title {\n        margin-bottom: px-to-rem(10);\n      }\n\n      .box-info-status-top-bid {\n        @include font-special();\n        font-size: px-to-rem(24);\n        height: px-to-rem(28);\n        color: $green;\n        margin: 0;\n      }\n\n      .box-info-status-info {\n        position: relative;\n        float: left;\n        width: 100%;\n        margin-top: px-to-rem(14);\n        margin-bottom: 0;\n        color: $gray;\n        text-align: left;\n        font-size: px-to-rem(10);\n      }\n    }\n\n    .box-info-status-bottom {\n      position: relative;\n      float: left;\n      width: 100%;\n      margin-top: 80px;\n\n      .box-info-status-bid {\n        position: relative;\n        float: left;\n        margin-left: px-to-rem(15);\n      }\n\n      .box-info-button {\n        position: relative;\n        float: left;\n        @include main-button;\n        text-transform: uppercase;\n        text-decoration: none;\n        width: 45%;\n        min-width: 200px;\n        max-width: 280px;\n\n        &.cta {\n          @include main-button-cta;\n          width: 50%;\n          margin: 0 px-to-rem(20) px-to-rem(20) 0;\n        }\n      }\n    }\n  }\n}\n\n.box-info.single {\n  .box-info-image {\n    width: 30%;\n    min-width: 300px;\n    max-width: 400px;\n    border: 1px $green solid;\n    align-self: stretch;\n  }\n\n  .box-info-data {\n    h2 {\n      font-size: px-to-rem(35);\n    }\n\n    .box-info-desc {\n      font-size: px-to-rem(14);\n      line-height: px-to-rem(18);\n\n      b {\n        color: $green;\n        font-weight: normal;\n      }\n    }\n\n    .box-info-status-bid {\n      .box-info-status-bid-title {\n        font-size: px-to-rem(12);\n        margin-bottom: px-to-rem(5);\n      }\n\n      .box-info-status-bid-bid {\n        @include font-special();\n        font-size: px-to-rem(21);\n        color: $pink;\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.Leaderboard-content {\n  width: 100%;\n  box-sizing: border-box;\n\n  table {\n    width: 100%;\n    border-spacing: 0;\n    border-collapse: collapse;\n\n    td,\n    th {\n      padding-left: px-to-rem(30);\n    }\n\n    td:nth-child(3),\n    th:nth-child(3) {\n      width: 40%;\n    }\n\n    td:nth-child(2),\n    th:nth-child(2) {\n      width: 13%;\n    }\n\n    td:nth-child(1),\n    th:nth-child(1) {\n      width: 8%;\n    }\n\n    thead {\n      text-align: left;\n      @include font-regular();\n      font-size: px-to-rem(12);\n      color: $green;\n\n      tr {\n        th {\n          border-top: 1px solid $green;\n          border-bottom: 1px solid $green;\n          padding-top: px-to-rem(3);\n          padding-bottom: px-to-rem(3);\n        }\n      }\n    }\n\n    tbody {\n      text-align: left;\n      @include font-regular();\n      font-size: px-to-rem(16);\n      color: $white;\n      padding-top: 10px;\n\n      tr {\n        td {\n          border-bottom: 1px solid $greentint-dark;\n          padding-top: px-to-rem(8);\n          padding-bottom: px-to-rem(8);\n\n          img {\n            float: left;\n            position: relative;\n            width: px-to-rem(50);\n          }\n\n          p {\n            float: left;\n            position: relative;\n            padding-left: px-to-rem(14);\n          }\n        }\n      }\n\n      tr:last-child {\n        td {\n          border-bottom: none;\n        }\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n.Asset {\n  position: relative;\n  float: left;\n  width: 100%;\n  background-color: transparent;\n  z-index: 50;\n  color: $green;\n  padding: px-to-rem(20) $navbar-padding-mobile;\n\n  @media (min-width: $layout-large) {\n    padding: px-to-rem(20) $navbar-padding-desktop;\n  }\n\n  &-container {\n    position: relative;\n    float: left;\n    width: 100%;\n    margin: px-to-rem(0) 0 0 0;\n    border: 1px $green solid;\n    padding: px-to-rem(20);\n    background-color: $blacktint;\n\n    &.leaderboard {\n      margin-top: px-to-rem(20);\n      padding: px-to-rem(20) 0 px-to-rem(6) 0;\n\n      h1 {\n        @include title;\n        padding: 0 px-to-rem(20) 0 px-to-rem(20);\n      }\n    }\n\n    @media (min-width: $layout-large) {\n      padding: px-to-rem(30);\n\n      &.leaderboard {\n        padding: px-to-rem(30) 0 px-to-rem(10) 0;\n\n        h1 {\n          padding: 0 px-to-rem(30) 0 px-to-rem(30);\n        }\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n"]}