{"version":3,"sources":["E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/MainNav.scss","E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/components/MainNav/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/BaseLink/E:/projects/fakeArtits/live4ever/src/components/BaseLink/E:/projects/fakeArtits/live4ever/src/components/BaseLink/BaseLink.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/HamburgerButton.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/components/HamburgerButton/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/Footer.scss","E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/components/Footer/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/HamburgerMenu.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/components/HamburgerMenu/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/components/PageOverlay/PageOverlay.scss","E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/components/PageOverlay/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/Counter.scss","E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/components/Counter/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/Landing.scss","E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/components/Landing/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/components/Pages/Pages.scss","E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/components/Pages/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Loader/E:/projects/fakeArtits/live4ever/src/components/Loader/E:/projects/fakeArtits/live4ever/src/components/Loader/Loader.scss","E:/projects/fakeArtits/live4ever/src/components/MineNav/E:/projects/fakeArtits/live4ever/src/components/MineNav/E:/projects/fakeArtits/live4ever/src/components/MineNav/MineNav.scss","E:/projects/fakeArtits/live4ever/src/components/MineNav/E:/projects/fakeArtits/live4ever/src/components/MineNav/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/WindowsHeader.scss","E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/components/WindowsHeader/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/AdBanner.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/Mine.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/components/Mine/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/components/Login/Login.scss","E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/components/Login/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/fonts.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/global.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/polyfills.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/global.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/scalable-font-size.scss","E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/E:/projects/fakeArtits/live4ever/src/style/vars.scss"],"names":[],"mappings":"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","file":"main.fd7051d8.chunk.css","sourcesContent":["@import 'src/style/shared.scss';\n\n$main-top-nav-height: 6rem !default;\n$main-top-nav-padding: 0 4rem !default;\n$main-top-nav-links-margin: 2rem !default;\n$main-top-nav-link-font-size: 2rem !default;\n\n.MainNav {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  min-width: $min-width;\n  background: transparent;\n  height: $navbar-height-mobile;\n  padding: 2rem $navbar-padding-mobile;\n  box-sizing: border-box;\n  z-index: 500;\n\n  .only-aria-visible {\n    clip-path: inset(100%);\n    clip: rect(1px 1px 1px 1px); /* IE 6/7 */\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n\n  .nav-mid-logo-cnt {\n    position: absolute;\n    top: $logo-size-top;\n    left: 50%;\n    display: inline-block;\n    width: $logo-size-width;\n    height: $logo-size-height;\n    margin-left: -$logo-size-half-width;\n\n    svg {\n      width: $logo-size-width;\n      height: $logo-size-height;\n    }\n  }\n\n  .nav-mid-logo {\n    display: inline-block;\n  }\n\n  .nav-mid-logo-text {\n    display: inline-block;\n    text-align: center;\n    width: 100%;\n\n    h1 {\n      margin: px-to-rem(5) 0 px-to-rem(5) -20%;\n      width: 140%;\n      @include font-light();\n      color: $pink;\n      font-size: px-to-rem(16);\n      line-height: px-to-rem(16);\n      text-align: center;\n    }\n\n    p {\n      margin: px-to-rem(5) 0;\n      @include font-h1;\n      color: $gray;\n      font-size: px-to-rem(12);\n    }\n  }\n\n  .nav {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    height: 100%;\n    z-index: 501;\n\n    .nav-logo {\n      width: px-to-rem(200);\n    }\n\n    .nav-logo-text {\n      margin: px-to-rem(0) px-to-rem(10);\n      position: absolute;\n      color: $green;\n      font-size: px-to-rem(10);\n      line-height: px-to-rem(10);\n    }\n\n    .nav-list {\n      display: inline-block;\n\n      .nav-item {\n        margin-left: $main-top-nav-links-margin;\n        display: inline-block;\n        @include main-button;\n        padding: px-to-rem(13) px-to-rem(15) px-to-rem(11) px-to-rem(15);\n\n        a {\n          text-decoration: none;\n        }\n      }\n    }\n  }\n\n  @media (max-width: $layout-small) {\n    .nav-logo-container {\n      transform-origin: top left;\n      transform: scale(0.5) translateY(30px);\n    }\n\n    .nav-logo-text {\n      display: none;\n    }\n\n    .nav-mid-logo-cnt {\n      top: calc(#{$logo-size-top} / 0.6);\n      width: calc(#{$logo-size-width} * 0.6);\n      height: calc(#{$logo-size-height} * 0.6);\n      margin-left: calc(#{-$logo-size-half-width} * 0.6);\n\n      svg {\n        width: calc(#{$logo-size-width} * 0.6);\n        height: calc(#{$logo-size-height} * 0.6);\n      }\n    }\n\n    .nav {\n      .nav-list {\n        .nav-item {\n          @include main-button;\n          padding: px-to-rem(5) px-to-rem(5) px-to-rem(5) px-to-rem(5);\n          font-size: px-to-rem(12);\n        }\n      }\n    }\n  }\n\n  @media (min-width: $layout-large) {\n    height: $navbar-height-desktop;\n    padding: 2rem $navbar-padding-desktop;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.BaseLink {\n  display: inline-block;\n}\n","@import 'src/style/shared.scss';\n\n$hamburger-button-width: 2.5rem !default;\n$hamburger-button-height: 2rem !default;\n$hamburger-button-bar-thickness: 2px !default;\n$hamburger-button-bar-color: $green !default;\n$hamburger-button-transition: 0.2s ease-out !default;\n\n.HamburgerButton {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n  padding: 10px 10px;\n  border: 1px solid $green;\n\n  .bars-container {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    width: $hamburger-button-width;\n    height: $hamburger-button-height;\n\n    .bar {\n      width: 100%;\n      height: $hamburger-button-bar-thickness;\n      background: $hamburger-button-bar-color;\n      transform-origin: top left;\n      transition: transform $hamburger-button-transition, opacity $hamburger-button-transition;\n    }\n  }\n\n  &.close {\n    .bar {\n      &:nth-child(1) {\n        transform: translateX(4px) rotate(45deg);\n      }\n\n      &:nth-child(2) {\n        transform: scaleX(0);\n        opacity: 0;\n      }\n\n      &:nth-child(3) {\n        transform: translateX(3px) rotate(-45deg);\n      }\n    }\n  }\n\n  &.back {\n    .bar {\n      &:nth-child(1) {\n        transform: translateX(-1px) translateY(10px) rotate(-45deg) scaleX(0.8);\n      }\n\n      &:nth-child(2) {\n        transform: scaleX(0);\n        opacity: 0;\n      }\n\n      &:nth-child(3) {\n        transform: translateX(1px) translateY(-9px) rotate(45deg) scaleX(0.8);\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n$main-footer-nav-padding: 0 4rem !default;\n$main-footer-links-margin: 2rem !default;\n$main-footer-link-font-size: 18px !default;\n$main-footer-link-color: $green !default;\n$main-footer-bg-color: transparent !default;\n$main-footer-copyright-color: $gray !default;\n$main-footer-copyright-font-size: 12px !default;\n\n.Footer {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: $footer-height-mobile;\n  padding: 5px $navbar-padding-mobile 2rem;\n  background: $main-footer-bg-color;\n  box-sizing: border-box;\n  @include z-index(footer);\n  text-align: center;\n  z-index: 500;\n\n  @media (min-width: $layout-medium) {\n    padding: 2rem $navbar-padding-desktop;\n    height: $footer-height-desktop;\n  }\n\n  @media (min-width: $layout-large) {\n    padding: 2rem $navbar-padding-desktop;\n    height: $footer-height-desktop;\n  }\n\n  .footer-nav {\n    .nav-list {\n      padding-left: 0;\n      margin: 0 auto;\n      height: 105px;\n\n      .footer-image {\n        display: inline-block;\n        width: 90px;\n        height: 50px;\n\n        .footer-image-title {\n          position: relative;\n          float: left;\n          width: 100%;\n          @include font-light;\n          font-size: 14px;\n          color: $green;\n          text-align: center;\n        }\n\n        .footer-logo {\n          position: relative;\n          width: 90px;\n          height: 50px;\n          background: url('#{$base-image-path}logo_fake-artists.png') no-repeat;\n          background-size: 90px 50px;\n        }\n      }\n\n      .nav-item {\n        display: inline-block;\n        font-size: $main-footer-link-font-size;\n        height: 100%;\n        vertical-align: middle;\n\n        &:last-of-type {\n          margin-right: 0;\n        }\n      }\n\n      a {\n        color: $main-footer-link-color;\n        text-decoration: none;\n\n        &:hover {\n          text-decoration: line-through;\n        }\n      }\n    }\n  }\n\n  .footer-copyright {\n    position: absolute;\n    left: 50px;\n    bottom: 20px;\n    font-size: $main-footer-copyright-font-size;\n    color: $main-footer-copyright-color;\n    margin: 2rem 0 0;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n$hamburger-nav-bg-color: #eee !default;\n$hamburger-nav-padding: 2rem !default;\n$hamburger-nav-links-margin: 2rem !default;\n$hamburger-nav-link-font-size: 2rem !default;\n$hamburger-nav-idle-link-color: rgba(#000, 0.6) !default;\n$hamburger-nav-hover-link-color: rgba(#000, 1) !default;\n$hamburger-nav-active-link-color: rgba(#000, 1) !default;\n$hamburger-nav-idle-link-decoration: none !default;\n$hamburger-nav-hover-link-decoration: none !default;\n$hamburger-nav-active-link-decoration: underline !default;\n$hamburger-nav-transition: 0.2s !default;\n\n.HamburgerMenu {\n  position: fixed;\n  top: $navbar-height-mobile;\n  right: 0;\n  width: 100%;\n  height: calc(100% - #{$navbar-height-mobile});\n  background: $hamburger-nav-bg-color;\n  padding: $hamburger-nav-padding;\n  transform: translateX(100%);\n  transition: $hamburger-nav-transition;\n  @include z-index(sidebar);\n  border-left: none;\n  background-color: transparent;\n\n  @media (min-width: $layout-medium) {\n    max-width: px-to-rem(300);\n    border-left: 1px solid rgba($black, 0.3);\n  }\n\n  &.open {\n    transform: translateX(0%);\n  }\n\n  .nav-list {\n    width: 100%;\n\n    .nav-item {\n      display: block;\n      margin-bottom: $hamburger-nav-links-margin;\n\n      &:last-of-type {\n        margin-bottom: 0;\n      }\n\n      a {\n        font-size: $hamburger-nav-link-font-size;\n        color: $hamburger-nav-idle-link-color;\n        text-decoration: $hamburger-nav-idle-link-decoration;\n\n        &.active {\n          color: $hamburger-nav-active-link-color;\n          text-decoration: $hamburger-nav-active-link-decoration;\n        }\n\n        &:hover:not(.active) {\n          color: $hamburger-nav-hover-link-color;\n          text-decoration: $hamburger-nav-hover-link-decoration;\n        }\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\n\n$page-overlay-bg-color: rgba(#000, 0.8) !default;\n$page-overlay-fade-transition: 0.2s;\n\n.PageOverlay {\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  background-color: $page-overlay-bg-color;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity $page-overlay-fade-transition;\n  transition-delay: visibility $page-overlay-fade-transition;\n  @include z-index(page-overlay);\n\n  &.is-showing {\n    opacity: 1;\n    visibility: visible;\n    transition-delay: 0s;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Counter {\n  position: relative;\n  float: left;\n  width: 100%;\n  margin: px-to-rem(10) 0 px-to-rem(60) 0;\n\n  ul {\n    position: relative;\n    float: left;\n    color: $green;\n    text-align: center;\n    left: 50%;\n    transform: translateX(-50%);\n    @include font-special();\n    font-size: px-to-rem(36);\n    line-height: px-to-rem(42);\n\n    @media (min-width: $min-width) {\n      font-size: 10vw;\n      line-height: 10vw;\n    }\n\n    li {\n      position: relative;\n      float: left;\n\n      &.counter-dot {\n        color: $pink;\n        padding-left: px-to-rem(0);\n        padding-right: px-to-rem(0);\n      }\n\n      p {\n        margin: 0;\n      }\n\n      span {\n        position: absolute;\n        left: 0;\n        width: 100%;\n        text-align: center;\n        @include font-regular();\n\n        bottom: px-to-rem(-25);\n        font-size: px-to-rem(12);\n        line-height: px-to-rem(14);\n      }\n    }\n  }\n\n  @media (min-width: $layout-medium) {\n    margin: px-to-rem(50) 0 px-to-rem(120) 0;\n\n    ul {\n      font-size: px-to-rem(80);\n      line-height: px-to-rem(90);\n\n      li {\n        &.counter-dot {\n          padding-left: px-to-rem(5);\n          padding-right: px-to-rem(5);\n        }\n\n        span {\n          bottom: px-to-rem(-40);\n          font-size: px-to-rem(20);\n          line-height: px-to-rem(22);\n        }\n      }\n    }\n  }\n\n  @media (min-width: $layout-large) {\n    margin: px-to-rem(50) 0 px-to-rem(120) 0;\n\n    font-size: px-to-rem(100);\n    line-height: px-to-rem(120);\n\n    li {\n      &.counter-dot {\n        padding-left: px-to-rem(20);\n        padding-right: px-to-rem(20);\n      }\n\n      span {\n        bottom: px-to-rem(-40);\n        font-size: px-to-rem(20);\n        line-height: px-to-rem(22);\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Landing {\n  box-sizing: border-box;\n  position: relative;\n  float: left;\n  width: 100%;\n  padding: px-to-rem(20) 0;\n  margin-top: $navbar-height-mobile;\n  height: calc(100vh - #{$navbar-height-mobile} - #{$footer-height-mobile});\n  z-index: 50;\n\n  .landing-container {\n    box-sizing: border-box;\n    margin: 0;\n    position: absolute;\n    width: 100%;\n    top: 50%;\n    transform: translateY(-50%);\n    text-align: center;\n    min-width: $min-width;\n\n    h1 {\n      position: relative;\n      float: left;\n      width: 100%;\n      @include font-regular();\n      color: $green;\n      font-size: px-to-rem(30);\n      line-height: px-to-rem(30);\n      padding: 0 px-to-rem(20);\n\n      span {\n        position: relative;\n        float: left;\n        width: 100%;\n        text-align: center;\n        padding: px-to-rem(5) 0;\n      }\n\n      b {\n        font-weight: normal;\n        color: $pink;\n      }\n    }\n\n    .landing-button {\n      @include main-button-cta;\n      margin-bottom: px-to-rem(60);\n    }\n\n    @media (max-width: $layout-medium) {\n      padding-top: px-to-rem(20);\n\n      h1 {\n        font-size: px-to-rem(20);\n        line-height: px-to-rem(20);\n\n        span {\n          padding: px-to-rem(5) 0;\n        }\n      }\n\n      .landing-button {\n        transform: scale(0.9);\n        margin-bottom: px-to-rem(20);\n      }\n    }\n  }\n\n  @media (min-width: $layout-large) {\n    height: calc(100vh - #{$navbar-height-desktop} - #{$footer-height-desktop});\n    padding: px-to-rem(20) 0;\n    margin-top: $navbar-height-desktop;\n\n    .landing-container {\n      h1 {\n        font-size: px-to-rem(36);\n        line-height: px-to-rem(36);\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Pages {\n  position: relative;\n  text-align: center;\n  margin-top: $navbar-height-mobile;\n  flex: 1;\n  z-index: 100;\n\n  @media (min-width: $layout-large) {\n    margin-top: $navbar-height-desktop;\n  }\n\n  & > section {\n    padding-bottom: px-to-rem(40);\n    width: 100%;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Loader {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  background-color: $black;\n  z-index: 9994;\n\n  @media (min-width: $layout-large) {\n  }\n\n  .loader-image {\n    position: absolute;\n    background: url('#{$base-image-path}pyramid_loader_small.gif');\n    background-repeat: no-repeat;\n    width: 150px;\n    height: 107px;\n    left: 50%;\n    bottom: 50vh;\n    margin: 0 0 -52px -75px;\n    z-index: 9995;\n  }\n\n  .loader-bg {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 0%;\n    overflow: hidden;\n  }\n\n  .loader-bg.black {\n    background-color: $black;\n    z-index: 9999;\n  }\n\n  .loader-bg.green {\n    background-color: $green;\n    z-index: 9997;\n  }\n\n  .loader-bg.pink {\n    background-color: $pink;\n    z-index: 9996;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.MineNav {\n  position: fixed;\n  width: calc(100% - 1px);\n  top: $navbar-height-mobile;\n  left: 0;\n  margin-top: px-to-rem(20);\n  padding: px-to-rem(15);\n  border: 1px solid $pink;\n  color: $pink;\n  background: $blacktint-dark;\n  z-index: 999;\n  overflow: hidden;\n\n  &::before {\n    content: '';\n    position: absolute;\n    width: 50%;\n    height: 90px;\n    left: 25%;\n    top: -50px;\n    background: radial-gradient(50% 50% at 50% 50%, #05ff0077 0%, rgba(0, 0, 0, 0) 100%);\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    width: 50%;\n    height: 90px;\n    left: 25%;\n    bottom: -50px;\n    background: radial-gradient(50% 50% at 50% 50%, #fa00ff77 0%, rgba(0, 0, 0, 0) 100%);\n  }\n\n  @media (min-width: $layout-large) {\n    top: $navbar-height-desktop;\n    margin-top: px-to-rem(20);\n  }\n\n  .label {\n    font-size: px-to-rem(12);\n\n    &.user {\n      font-size: px-to-rem(18);\n    }\n  }\n\n  .digits {\n    @include font-special();\n    font-size: px-to-rem(16);\n    padding: 0 px-to-rem(20);\n\n    &.user {\n      font-size: px-to-rem(24);\n    }\n  }\n\n  .delta {\n    @include font-special();\n    font-size: px-to-rem(16);\n\n    &.user {\n      font-size: px-to-rem(24);\n    }\n  }\n\n  .time-left-wrapper {\n    position: absolute;\n    left: 6%;\n    color: $green;\n    margin-top: px-to-rem(5);\n  }\n\n  .rank-wrapper {\n    position: absolute;\n    right: 6%;\n    margin-top: px-to-rem(5);\n\n    .rank-count {\n      position: relative;\n      float: right;\n    }\n\n    .rank-bid {\n      position: relative;\n      float: right;\n      margin-right: px-to-rem(24);\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\r\n\r\n.WindowsHeader {\r\n  position: relative;\r\n  float: left;\r\n  width: 100%;\r\n  height: 30px;\r\n  border-bottom: 1px solid $green;\r\n  background: $black;\r\n  user-select: none;\r\n\r\n  ul {\r\n    position: relative;\r\n    float: left;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    li {\r\n      position: relative;\r\n      float: right;\r\n      height: 100%;\r\n      width: 30px;\r\n      border-bottom: 2px solid $gray;\r\n      border-right: 2px solid $gray;\r\n      border-top: 2px solid $green;\r\n      border-left: 2px solid $green;\r\n      background: $black;\r\n      color: $green;\r\n      font-size: 18px;\r\n      text-align: center;\r\n      vertical-align: middle;\r\n      user-select: none;\r\n\r\n      &.windows-header-windows {\r\n        &::before {\r\n          position: absolute;\r\n          content: '';\r\n          border: 2px solid $gray;\r\n          width: 16px;\r\n          height: 12px;\r\n          left: 7px;\r\n          top: 5px;\r\n          z-index: 901;\r\n        }\r\n\r\n        &::after {\r\n          position: absolute;\r\n          content: '';\r\n          border: 2px solid $green;\r\n          width: 16px;\r\n          height: 12px;\r\n          left: 5px;\r\n          top: 7px;\r\n          z-index: 902;\r\n        }\r\n      }\r\n\r\n      &.windows-header-close {\r\n        line-height: 30px;\r\n      }\r\n\r\n      &.active {\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          background: $greentint-dark;\r\n          color: $green;\r\n\r\n          &::after {\r\n            border: 2px solid $green;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","@import 'src/style/shared.scss';\r\n\r\n.Adbanner {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 900;\r\n\r\n  .Adbanner-wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .Adbanner-content {\r\n    position: relative;\r\n    float: left;\r\n    width: 100%;\r\n    height: calc(100% - 30px);\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    overflow: hidden;\r\n    background: $black;\r\n    background-position: center center;\r\n    color: $green;\r\n\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n      object-position: center center;\r\n      min-height: 100%;\r\n      min-width: 100%;\r\n      z-index: -1;\r\n      filter: brightness(50%);\r\n      user-select: none;\r\n    }\r\n\r\n    canvas {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: none;\r\n      object-position: center;\r\n      min-height: 100%;\r\n      min-width: 100%;\r\n      user-select: none;\r\n    }\r\n\r\n    span {\r\n      z-index: 1;\r\n      position: absolute;\r\n      display: inline-block;\r\n      width: 100%;\r\n      top: 32%;\r\n      font-size: 130%;\r\n      text-shadow: 2px 2px $pink;\r\n      cursor: default;\r\n      user-select: none;\r\n\r\n      &.center {\r\n        top: 40%;\r\n      }\r\n    }\r\n\r\n    button {\r\n      @include ad-button;\r\n    }\r\n\r\n    .test {\r\n      filter: brightness(50%);\r\n    }\r\n  }\r\n}\r\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Mine {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  z-index: 900;\n  background: $blacktint;\n  padding: px-to-rem(20) $navbar-padding-mobile;\n\n  @media (min-width: $layout-large) {\n    padding: px-to-rem(20) $navbar-padding-desktop;\n  }\n\n  .mine-close {\n    position: absolute;\n    top: px-to-rem(50);\n    right: px-to-rem(50);\n    @include item-button;\n    cursor: pointer;\n  }\n\n  .mine-container {\n    position: absolute;\n    top: $navbar-height-mobile;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 900;\n  }\n\n  .Adbanner {\n    width: auto;\n    height: auto;\n    z-index: 900;\n  }\n\n  .Adbanner-wrapper {\n    display: inline-block;\n    border: 1px solid $green;\n    width: 640px;\n    height: 350px;\n    z-index: 900;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Login {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: transparent;\n  z-index: 980;\n  overflow: hidden;\n\n  .login-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: $blacktint;\n    width: 100%;\n    height: 100%;\n  }\n\n  .login-container {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    background-color: $black;\n    border: 1px solid $green;\n    width: 80%;\n    max-width: 400px;\n    transform: translate(-50%, -50%);\n\n    .login-info {\n      position: relative;\n      float: left;\n      width: 100%;\n\n      h1 {\n        font-size: px-to-rem(20);\n        line-height: px-to-rem(24);\n        color: $pink;\n        @include font-title();\n        text-align: center;\n        padding: px-to-rem(40) px-to-rem(20);\n        margin: 0;\n\n        &.logout {\n          padding: px-to-rem(50) px-to-rem(20) 0 px-to-rem(20);\n        }\n      }\n\n      p {\n        font-size: px-to-rem(14);\n        line-height: px-to-rem(16);\n        color: $green;\n        @include font-light();\n        text-align: center;\n        padding: px-to-rem(0) px-to-rem(40);\n        margin: 0;\n      }\n    }\n\n    .login-bt-container {\n      position: relative;\n      float: left;\n      width: 100%;\n      padding: px-to-rem(40) px-to-rem(20) px-to-rem(50) px-to-rem(20);\n    }\n\n    .login-bt {\n      position: relative;\n      float: left;\n      left: 50%;\n      transform: translateX(-50%);\n      text-align: center;\n      background-color: $green !important;\n      color: $black !important;\n      font-family: 'Aldrich' !important;\n\n      span {\n        padding: 12px 18px 10px 10px !important;\n      }\n\n      &:hover {\n        background-color: $pink !important;\n        color: $black !important;\n      }\n\n      &:disabled {\n        opacity: 0.2 !important;\n      }\n    }\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","// Fonts\n//\n// Location of all the font-families and font-related css\n//\n// Best practices:\n// 1. Avoid load as many fonts as possible, e.x font styles, font families\n// 2. Optimize the font, remove the characters set that the site won't use: languages\n// 3. Include the unicode range in case you couldn't remove the characters. Included just Latin by default\n// 4. Change fonts just changing the font-weight\n\n@import 'vars.scss';\n\n$base-path: '../assets/fonts/';\n\n@font-face {\n  font-family: 'Aldrich';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}Aldrich/aldrich-v11-latin-regular.woff') format('woff'),\n    url('#{$base-path}Aldrich/aldrich-v11-latin-regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n@font-face {\n  font-family: 'Orbitron';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}Orbitron/Orbitron-Regular.woff') format('woff'),\n    url('#{$base-path}Orbitron/Orbitron-Regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\n// @font-face {\n//   font-family: 'SquadaOne';\n//   font-style: normal;\n//   font-weight: 100;\n//   font-display: swap;\n//   src: url('#{$base-path}SquadaOne/squada-one-v9-latin-regular.woff') format('woff'),\n//     url('#{$base-path}SquadaOne/squada-one-v9-latin-regular.ttf') format('truetype');\n//   unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n//     U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n// }\n\n// @font-face {\n//   font-family: 'StalinistOne';\n//   font-style: normal;\n//   font-weight: 100;\n//   font-display: swap;\n//   src: url('#{$base-path}StalinistOne/stalinist-one-v28-latin-regular.woff') format('woff'),\n//     url('#{$base-path}StalinistOne/stalinist-one-v28-latin-regular.ttf') format('truetype');\n//   unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n//     U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n// }\n\n@font-face {\n  font-family: 'DigitalNumbers';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url('#{$base-path}DigitalNumbers/DigitalNumbers-Regular.woff') format('woff'),\n    url('#{$base-path}DigitalNumbers/DigitalNumbers-Regular.ttf') format('truetype');\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac,\n    U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n","@font-face {\n  font-family: 'Aldrich';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/Aldrich/aldrich-v11-latin-regular.woff\") format(\"woff\"), url(\"../assets/fonts/Aldrich/aldrich-v11-latin-regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n@font-face {\n  font-family: 'Orbitron';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/Orbitron/Orbitron-Regular.woff\") format(\"woff\"), url(\"../assets/fonts/Orbitron/Orbitron-Regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n@font-face {\n  font-family: 'DigitalNumbers';\n  font-style: normal;\n  font-weight: 100;\n  font-display: swap;\n  src: url(\"../assets/fonts/DigitalNumbers/DigitalNumbers-Regular.woff\") format(\"woff\"), url(\"../assets/fonts/DigitalNumbers/DigitalNumbers-Regular.ttf\") format(\"truetype\");\n  unicode-range: U+0000-00ff, U+0131, U+0152-0153, U+02bb-02bc, U+02c6, U+02da, U+02dc, U+2000-206f, U+2074, U+20ac, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }\n\n[hidden] {\n  display: none !important; }\n\nhtml {\n  box-sizing: border-box;\n  font-family: \"Aldrich\", Helvetica, Arial, sans-serif;\n  font-weight: 400;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-overflow-scrolling: touch;\n  font-size: 10px; }\n  @media (min-width: 1200px) and (max-width: 1200px) {\n    html {\n      font-size: 10px; } }\n  @media (min-width: 1200px) {\n    html {\n      font-size: 0.83333vw; } }\n  @media (min-width: 1920px) {\n    html {\n      font-size: 16px; } }\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  font-size: 1.6rem;\n  background-color: #000; }\n  body.rotate-screen-visible {\n    background-color: #000 !important; }\n\n#root {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh; }\n  #root .lines-bg {\n    position: fixed;\n    height: calc((100vh - 225px) / 2);\n    top: 65px;\n    z-index: 5;\n    min-width: 350px; }\n  #root .lines-bg-inv {\n    position: absolute;\n    bottom: calc(180px - 20px);\n    height: calc((100vh - 224px) / 2);\n    z-index: 5;\n    transform: scale(1, -1);\n    min-width: 350px; }\n    @media (max-width: 550px) {\n      #root .lines-bg-inv {\n        bottom: calc(130px);\n        height: calc((100vh - 164px) / 2); } }\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit; }\n\n.only-aria-visible {\n  clip-path: inset(100%);\n  clip: rect(1px 1px 1px 1px);\n  /* IE 6/7 */\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  /* added line */\n  width: 1px; }\n\na {\n  color: inherit; }\n\nul,\ndl,\nol {\n  margin: 0;\n  padding: 0;\n  list-style: none; }\n\nli,\ndt,\ndd {\n  margin: 0;\n  padding: 0; }\n","// Polyfills\n//\n// Used to write down all the cross browser code\n\n[hidden] {\n  display: none !important;\n}\n","// Globals\n//\n// Global styling, normalize overwritten\n@import 'fonts.scss';\n@import 'polyfills.scss';\n@import 'shared.scss';\n@import 'scalable-font-size.scss';\n\nhtml {\n  box-sizing: border-box;\n  @include font-regular;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-overflow-scrolling: touch;\n  @include scalable-font();\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  font-size: px-to-rem(16);\n  background-color: $black;\n\n  &.rotate-screen-visible {\n    background-color: $rotate-screen-bg-color !important; // trick to avoid the iPhone X notch\n  }\n}\n\n#root {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n\n  .lines-bg {\n    position: fixed;\n    height: calc((100vh - 225px) / 2);\n    top: 65px;\n    z-index: 5;\n    min-width: $min-width;\n  }\n\n  .lines-bg-inv {\n    position: absolute;\n    bottom: calc(#{$footer-height-desktop} - 20px);\n    height: calc((100vh - 224px) / 2);\n    z-index: 5;\n    transform: scale(1, -1);\n    min-width: $min-width;\n\n    @media (max-width: $layout-small) {\n      bottom: calc(#{$footer-height-mobile});\n      height: calc((100vh - 164px) / 2);\n    }\n  }\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\n.only-aria-visible {\n  clip-path: inset(100%);\n  clip: rect(1px 1px 1px 1px); /* IE 6/7 */\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap; /* added line */\n  width: 1px;\n}\n\na {\n  color: inherit;\n}\n\nul,\ndl,\nol {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nli,\ndt,\ndd {\n  margin: 0;\n  padding: 0;\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'Orbitron', #{$generic-fonts};\n  letter-spacing: 3px;\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-special() {\n  font-family: 'DigitalNumbers', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  text-transform: uppercase;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  font-size: px-to-rem(16);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    // background-color: $greentint-dark;\n    background-color: $green;\n    color: $black;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(15) px-to-rem(20) px-to-rem(13) px-to-rem(20);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  font-size: px-to-rem(16);\n  color: $pink;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(6) px-to-rem(3) px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n  font-size: px-to-rem(16);\n\n  &.active {\n    text-transform: none;\n    background-color: $green;\n    color: $black;\n  }\n\n  &.active:hover {\n    cursor: pointer;\n    border: 1px $pink solid;\n    background-color: $pink;\n    color: $black;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n\n@mixin ad-button {\n  z-index: 1;\n  position: absolute;\n  display: inline-block;\n  margin: 0 auto;\n  width: 20%;\n  text-align: center;\n  top: 70%;\n  left: 40%;\n  font-size: 120%;\n  padding-top: 6px;\n  background-color: $gray;\n  color: $white;\n  border-top: 4px solid $white;\n  border-right: 4px solid $greentint-dark;\n  border-bottom: 4px solid $greentint-dark;\n  border-left: 4px solid $white;\n  user-select: none;\n  opacity: 0.4;\n\n  &.active {\n    cursor: pointer;\n    background-color: $green;\n    color: $pink;\n    opacity: 1;\n  }\n\n  &.active:hover {\n    color: $white;\n    background-color: $pink;\n  }\n}\n","@import 'shared.scss';\n\n$default-font-size-percent: 62.5;\n$default-font-size-px: 10;\n\n// we need to convert percentages so that html font size is set in px, otherwise Safari won't scale below 9px ignoring %\n$percent-to-px-multiplier: $default-font-size-px / $default-font-size-percent;\n\n// ====================================================================\n// RANGES\n// HTML font size will proportionately scale up or down within the allowed range\n// ====================================================================\n\n// below this size we lock font size at its min\n$min-scale-size: map-get($layout, large);\n\n// above this size we lock font size at its max\n$max-scale-size: map-get($layout, xlarge);\n\n// only at this exact screen resolution pixel values will match designs\n// If $base-design-width > $min-scale-size it will scale down in that range, by default they are equal\n$base-design-width: map-get($layout, large);\n\n// ====================================================================\n// CALCULATED VALUES\n// ====================================================================\n$scale: $min-scale-size / $base-design-width;\n\n@mixin scalable-font() {\n  font-size: #{$default-font-size-px}px;\n\n  @media (min-width: $layout-large) and (max-width: #{$min-scale-size}px) {\n    // lock font size for min range limit\n    $font-size: $default-font-size-percent * $scale;\n    font-size: #{$font-size * $percent-to-px-multiplier}px;\n  }\n\n  @media (min-width: #{$min-scale-size}px) {\n    // proportionately scale font size within range\n    $font-size: $default-font-size-percent / $min-scale-size * $scale * 100;\n    font-size: #{$font-size * $percent-to-px-multiplier}vw;\n  }\n\n  @media (min-width: #{$max-scale-size}px) {\n    // lock font size for max range limit\n    $font-size: $default-font-size-percent / $min-scale-size * $max-scale-size * $scale;\n    font-size: #{$font-size * $percent-to-px-multiplier}px;\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n$logo-size-width: 170px;\n$logo-size-height: 88px;\n$logo-size-half-width: 85px;\n$logo-size-top: 25px;\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-small: map-get($layout, small) + px;\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n$min-width: 350px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n$blacktint-dark: rgba(0, 0, 0, 0.9);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n\n$footer-height-mobile: 130px;\n$footer-height-desktop: 180px;\n"]}