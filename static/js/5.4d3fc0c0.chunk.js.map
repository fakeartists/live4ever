{"version":3,"sources":["pages/PagesTransitionWrapper.js","pages/About/About.js"],"names":["transitionStates","PagesTransitionWrapper","Class","container","handleEnterTransition","_ref","Object","_Users_fabio_Documents_Projects_live4ever_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_fabio_Documents_Projects_live4ever_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","previousRoute","onEnter","onAppear","transitionDuration","_args","arguments","wrap","_context","prev","next","length","undefined","noop","getExitTransitionDuration","wait","style","display","stop","this","_x","apply","componentDidMount","prototype","call","findDOMNode","window","scrollTo","props","transitionState","componentDidUpdate","handleLeaveTransition","onLeave","About","_this","_Users_fabio_Documents_Projects_live4ever_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_Users_fabio_Documents_Projects_live4ever_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_fabio_Documents_Projects_live4ever_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","animateIn","prevSectionExitDuration","animateOut","animate","to","x","autoAlpha","ease","Expo","easeOut","state","set","_this2","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","classnames","ref","el","React","PureComponent","defaultProps","connect","dispatch","Transition"],"mappings":"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","file":"static/js/5.4d3fc0c0.chunk.js","sourcesContent":["import noop from 'no-op';\nimport { findDOMNode } from 'react-dom';\nimport wait from '@jam3/wait';\n\nimport { getExitTransitionDuration } from '../data/pages-transitions';\n\nconst transitionStates = {\n  entering: 'entering',\n  entered: 'entered',\n  exiting: 'exiting',\n  exited: 'exited'\n};\n\nconst PagesTransitionWrapper = Class => {\n  let container;\n  const handleEnterTransition = async (previousRoute, onEnter = noop, onAppear = noop) => {\n    // console.log('in::' + transitionStates);\n\n    if (previousRoute) {\n      const transitionDuration = getExitTransitionDuration(previousRoute) || 0;\n      onEnter(transitionDuration);\n      await wait(transitionDuration);\n      container.style.display = '';\n    } else {\n      container.style.display = '';\n      onAppear();\n    }\n  };\n\n  const handleLeaveTransition = (onLeave = noop) => {\n    // console.log('out::' + transitionStates);\n    onLeave();\n  };\n\n  const componentDidMount = Class.prototype.componentDidMount;\n  Class.prototype.componentDidMount = function() {\n    componentDidMount && componentDidMount.call(this);\n    container = findDOMNode(this);\n    container.style.display = 'none';\n\n    window.scrollTo(0, 0);\n\n    if (\n      this.props.transitionState === transitionStates.entered ||\n      this.props.transitionState === transitionStates.entering\n    ) {\n      handleEnterTransition(this.props.previousRoute, this.onEnter, this.onAppear);\n    }\n  };\n\n  const componentDidUpdate = Class.prototype.componentDidUpdate;\n  Class.prototype.componentDidUpdate = function() {\n    componentDidUpdate && componentDidUpdate.apply(this, arguments);\n    if (this.props.transitionState === transitionStates.entering) {\n      handleEnterTransition(this.props.previousRoute, this.onEnter, this.onAppear);\n    } else if (this.props.transitionState === transitionStates.exiting) {\n      handleLeaveTransition(this.onLeave);\n    }\n  };\n\n  return Class;\n};\n\nexport default PagesTransitionWrapper;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n///import wait from '@jam3/wait';\nimport checkProps from '@jam3/react-check-extra-props';\n\nimport './About.scss';\n\nimport Transition from '../PagesTransitionWrapper';\nimport animate, { Expo } from '../../util/gsap-animate';\n\nclass About extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    animate.set(this.container, { x: '100%', autoAlpha: 0 });\n  }\n\n  onAppear = () => {\n    this.animateIn();\n  };\n\n  onEnter = async prevSectionExitDuration => {\n    //await wait(prevSectionExitDuration);\n    this.animateIn();\n  };\n\n  onLeave = () => {\n    this.animateOut();\n  };\n\n  animateIn = () => {\n    animate.to(this.container, 0.8, { x: '0%', autoAlpha: 1, ease: Expo.easeOut });\n  };\n\n  animateOut = () => {\n    animate.to(this.container, 0.1, { x: '0%', autoAlpha: 0, ease: Expo.easeOut });\n  };\n\n  render() {\n    return (\n      <section className={classnames('About', this.props.className)} ref={el => (this.container = el)}>\n        <h1>\n          Section 1: The Two Factors of a Commodity: Use-Value and Value (The Substance of Value and the Magnitude of\n          Value)\n        </h1>\n        <p>\n          The wealth of those societies in which the capitalist mode of production prevails, presents itself as “an\n          immense accumulation of commodities,”1 its unit being a single commodity. Our investigation must therefore\n          begin with the analysis of a commodity. A commodity is, in the first place, an object outside us, a thing that\n          by its properties satisfies human wants of some sort or another. The nature of such wants, whether, for\n          instance, they spring from the stomach or from fancy, makes no difference.2 Neither are we here concerned to\n          know how the object satisfies these wants, whether directly as means of subsistence, or indirectly as means of\n          production. Every useful thing, as iron, paper, &c., may be looked at from the two points of view of quality\n          and quantity. It is an assemblage of many properties, and may therefore be of use in various ways. To discover\n          the various uses of things is the work of history.3 So also is the establishment of socially-recognized\n          standards of measure for the quantities of these useful objects. The diversity of these measures has its\n          origin partly in the diverse nature of the objects to be measured, partly in convention. The utility of a\n          thing makes it a use value.4 But this utility is not a thing of air. Being limited by the physical properties\n          of the commodity, it has no existence apart from that commodity. A commodity, such as iron, corn, or a\n          diamond, is therefore, so far as it is a material thing, a use value, something useful. This property of a\n          commodity is independent of the amount of labour required to appropriate its useful qualities. When treating\n          of use value, we always assume to be dealing with definite quantities, such as dozens of watches, yards of\n          linen, or tons of iron. The use values of commodities furnish the material for a special study, that of the\n          commercial knowledge of commodities.5 Use values become a reality only by use or consumption: they also\n          constitute the substance of all wealth, whatever may be the social form of that wealth. In the form of society\n          we are about to consider, they are, in addition, the material depositories of exchange value. Exchange value,\n          at first sight, presents itself as a quantitative relation, as the proportion in which values in use of one\n          sort are exchanged for those of another sort,6 a relation constantly changing with time and place.\n        </p>\n        <p>\n          Hence exchange value appears to be something accidental and purely relative, and consequently an intrinsic\n          value, i.e., an exchange value that is inseparably connected with, inherent in commodities, seems a\n          contradiction in terms.7 Let us consider the matter a little more closely. A given commodity, e.g., a quarter\n          of wheat is exchanged for x blacking, y silk, or z gold, &c. – in short, for other commodities in the most\n          different proportions. Instead of one exchange value, the wheat has, therefore, a great many. But since x\n          blacking, y silk, or z gold &c., each represents the exchange value of one quarter of wheat, x blacking, y\n          silk, z gold, &c., must, as exchange values, be replaceable by each other, or equal to each other. Therefore,\n          first: the valid exchange values of a given commodity express something equal; secondly, exchange value,\n          generally, is only the mode of expression, the phenomenal form, of something contained in it, yet\n          distinguishable from it. 28 Chapter 1 Let us take two commodities, e.g., corn and iron. The proportions in\n          which they are exchangeable, whatever those proportions may be, can always be represented by an equation in\n          which a given quantity of corn is equated to some quantity of iron: e.g., 1 quarter corn = x cwt. iron. What\n          does this equation tell us? It tells us that in two different things – in 1 quarter of corn and x cwt. of\n          iron, there exists in equal quantities something common to both. The two things must therefore be equal to a\n          third, which in itself is neither the one nor the other. Each of them, so far as it is exchange value, must\n          therefore be reducible to this third. A simple geometrical illustration will make this clear. In order to\n          calculate and compare the areas of rectilinear figures, we decompose them into triangles. But the area of the\n          triangle itself is expressed by something totally different from its visible figure, namely, by half the\n          product of the base multiplied by the altitude. In the same way the exchange values of commodities must be\n          capable of being expressed in terms of something common to them all, of which thing they represent a greater\n          or less quantity. This common “something” cannot be either a geometrical, a chemical, or any other natural\n          property of commodities. Such properties claim our attention only in so far as they affect the utility of\n          those commodities, make them use values. But the exchange of commodities is evidently an act characterised by\n          a total abstraction from use value. Then one use value is just as good as another, provided only it be present\n          in sufficient quantity.\n        </p>\n        <p>\n          Or, as old Barbon says, “one sort of wares are as good as another, if the values be equal. There is no\n          difference or distinction in things of equal value ... An hundred pounds’ worth of lead or iron, is of as\n          great value as one hundred pounds’ worth of silver or gold.”8 As use values, commodities are, above all, of\n          different qualities, but as exchange values they are merely different quantities, and consequently do not\n          contain an atom of use value. If then we leave out of consideration the use value of commodities, they have\n          only one common property left, that of being products of labour. But even the product of labour itself has\n          undergone a change in our hands. If we make abstraction from its use value, we make abstraction at the same\n          time from the material elements and shapes that make the product a use value; we see in it no longer a table,\n          a house, yarn, or any other useful thing. Its existence as a material thing is put out of sight. Neither can\n          it any longer be regarded as the product of the labour of the joiner, the mason, the spinner, or of any other\n          definite kind of productive labour. Along with the useful qualities of the products themselves, we put out of\n          sight both the useful character of the various kinds of labour embodied in them, and the concrete forms of\n          that labour; there is nothing left but what is common to them all; all are reduced to one and the same sort of\n          labour, human labour in the abstract. Let us now consider the residue of each of these products; it consists\n          of the same unsubstantial reality in each, a mere congelation of homogeneous human labour, of labour power\n          expended without regard to the mode of its expenditure. All that these things now tell us is, that human\n          labour power has been expended in their production, that human labour is embodied in them. When looked at as\n          crystals of this social substance, common to them all, they are – Values. We have seen that when commodities\n          are exchanged, their exchange value manifests itself as something totally independent of their use value. But\n          if we abstract from their use value, there remains their Value as defined above.\n        </p>\n        <p>\n          Therefore, the common substance that manifests itself in the exchange value of commodities, whenever they are\n          exchanged, is their value. The progress of our investigation will show that exchange value is the only form in\n          which the value of commodities can manifest itself or be expressed. For the present, however, we have to\n          consider the nature of value independently of this, its form. 29 Chapter 1 A use value, or useful article,\n          therefore, has value only because human labour in the abstract has been embodied or materialised in it. How,\n          then, is the magnitude of this value to be measured? Plainly, by the quantity of the value-creating substance,\n          the labour, contained in the article. The quantity of labour, however, is measured by its duration, and labour\n          time in its turn finds its standard in weeks, days, and hours. Some people might think that if the value of a\n          commodity is determined by the quantity of labour spent on it, the more idle and unskilful the labourer, the\n          more valuable would his commodity be, because more time would be required in its production. The labour,\n          however, that forms the substance of value, is homogeneous human labour, expenditure of one uniform labour\n          power. The total labour power of society, which is embodied in the sum total of the values of all commodities\n          produced by that society, counts here as one homogeneous mass of human labour power, composed though it be of\n          innumerable individual units. Each of these units is the same as any other, so far as it has the character of\n          the average labour power of society, and takes effect as such; that is, so far as it requires for producing a\n          commodity, no more time than is needed on an average, no more than is socially necessary. The labour time\n          socially necessary is that required to produce an article under the normal conditions of production, and with\n          the average degree of skill and intensity prevalent at the time. The introduction of power-looms into England\n          probably reduced by one-half the labour required to weave a given quantity of yarn into cloth. The handloom\n          weavers, as a matter of fact, continued to require the same time as before; but for all that, the product of\n          one hour of their labour represented after the change only half an hour’s social labour, and consequently fell\n          to one-half its former value. We see then that that which determines the magnitude of the value of any article\n          is the amount of labour socially necessary, or the labour time socially necessary for its production.9 Each\n          individual commodity, in this connexion, is to be considered as an average sample of its class.10 Commodities,\n          therefore, in which equal quantities of labour are embodied, or which can be produced in the same time, have\n          the same value. The value of one commodity is to the value of any other, as the labour time necessary for the\n          production of the one is to that necessary for the production of the other. “As values, all commodities are\n          only definite masses of congealed labour time.”11 The value of a commodity would therefore remain constant, if\n          the labour time required for its production also remained constant. But the latter changes with every\n          variation in the productiveness of labour. This productiveness is determined by various circumstances, amongst\n          others, by the average amount of skill of the workmen, the state of science, and the degree of its practical\n          application, the social organisation of production, the extent and capabilities of the means of production,\n          and by physical conditions. For example, the same amount of labour in favourable seasons is embodied in 8\n          bushels of corn, and in unfavourable, only in four. The same labour extracts from rich mines more metal than\n          from poor mines.\n        </p>\n        <p>\n          Diamonds are of very rare occurrence on the earth’s surface, and hence their discovery costs, on an average, a\n          great deal of labour time. Consequently much labour is represented in a small compass. Jacob doubts whether\n          gold has ever been paid for at its full value. This applies still more to diamonds. According to Eschwege, the\n          total produce of the Brazilian diamond mines for the eighty years, ending in 1823, had not realised the price\n          of one-and-a-half years’ average produce of the sugar and coffee plantations of the same country, although the\n          diamonds cost much more labour, and therefore represented more value. With richer mines, the same quantity of\n          labour would embody itself in more diamonds, and their value would fall. If we could succeed at a small\n          expenditure of labour, in converting carbon into diamonds, their value might fall below that of bricks. In\n          general, the greater the productiveness of labour, the less is the labour time required for the production of\n          an 30 Chapter 1 article, the less is the amount of labour crystallised in that article, and the less is its\n          value; and vice versâ, the less the productiveness of labour, the greater is the labour time required for the\n          production of an article, and the greater is its value. The value of a commodity, therefore, varies directly\n          as the quantity, and inversely as the productiveness, of the labour incorporated in it. * A thing can be a use\n          value, without having value. This is the case whenever its utility to man is not due to labour. Such are air,\n          virgin soil, natural meadows, &c. A thing can be useful, and the product of human labour, without being a\n          commodity. Whoever directly satisfies his wants with the produce of his own labour, creates, indeed, use\n          values, but not commodities. In order to produce the latter, he must not only produce use values, but use\n          values for others, social use values. (And not only for others, without more. The mediaeval peasant produced\n          quit-rent-corn for his feudal lord and tithe-corn for his parson. But neither the quit-rent-corn nor the\n          tithe-corn became commodities by reason of the fact that they had been produced for others. To become a\n          commodity a product must be transferred to another, whom it will serve as a use value, by means of an\n          exchange.)12 Lastly nothing can have value, without being an object of utility. If the thing is useless, so is\n          the labour contained in it; the labour does not count as labour, and therefore creates no value.\n        </p>\n      </section>\n    );\n  }\n}\n\nAbout.propTypes = checkProps({\n  className: PropTypes.string,\n  transitionState: PropTypes.string.isRequired,\n  previousRoute: PropTypes.string\n});\n\nAbout.defaultProps = {};\n\nconst mapStateToProps = state => ({\n  previousRoute: state.previousRoute\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Transition(About));\n"],"sourceRoot":""}