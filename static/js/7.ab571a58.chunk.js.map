{"version":3,"sources":["components/RotateScreen/RotateScreen.js"],"names":["RotateScreen","props","_this","Object","E_projects_fakeArtits_live4ever_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","E_projects_fakeArtits_live4ever_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","E_projects_fakeArtits_live4ever_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","preventScrolling","e","preventDefault","stopPropagation","setOrientationParentClass","arguments","length","undefined","state","orientation","document","body","classList","add","remove","handleOrientationChange","device","getOrientation","setState","copy","getCopy","language","os","isAndroid","window","addEventListener","container","passive","prevProps","prevState","removeEventListener","_this2","style","visibility","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","classnames","ref","r","src","iconSrc","alt","iconAlt","text","children","PureComponent","defaultProps"],"mappings":"6QAUqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmCRQ,iBAAmB,SAAAC,GACjBA,EAAEC,iBACFD,EAAEE,mBAtCeV,EAyCnBW,0BAA4B,WACV,eADoDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3BZ,EAAKe,MAAMC,aAEhDC,SAASC,KAAKC,UAAUC,IAAI,yBAC5BH,SAASC,KAAKC,UAAUE,OAAO,0BA5ClBrB,EA+CnBsB,wBAA0B,WACpBC,IAAOC,mBAAqBxB,EAAKe,MAAMC,aACzChB,EAAKyB,SAAS,CAAET,YAAaO,IAAOC,oBA/CtCxB,EAAKe,MAAQ,CACXC,YAAaO,IAAOC,kBAGtBxB,EAAK0B,KAAOC,YAAQ3B,EAAKD,MAAM6B,SAAU,UANxB5B,mFAUjBG,KAAKQ,4BAEDkB,IAAGC,UACLC,OAAOC,iBAAiB,oBAAqB7B,KAAKmB,yBAElDS,OAAOC,iBAAiB,SAAU7B,KAAKmB,yBAGzCnB,KAAK8B,UAAUD,iBAAiB,YAAa7B,KAAKI,iBAAkB,CAAE2B,SAAS,+CAG9DC,EAAWC,GACxBjC,KAAKY,MAAMC,cAAgBoB,EAAUpB,aACvCb,KAAKQ,2EAKHkB,IAAGC,UACLC,OAAOM,oBAAoB,oBAAqBlC,KAAKmB,yBAErDS,OAAOM,oBAAoB,SAAUlC,KAAKmB,yBAE5CnB,KAAK8B,UAAUI,oBAAoB,YAAalC,KAAKI,mDAoB9C,IAAA+B,EAAAnC,KAEDoC,EAAQ,CACZC,WAFyC,cAA3BrC,KAAKY,MAAMC,YAEH,UAAY,UAGpC,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,eAAgB1C,KAAKJ,MAAM6C,WAAYL,MAAOA,EAAOO,IAAK,SAAAC,GAAC,OAAKT,EAAKL,UAAYc,IAC1GN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZH,EAAAC,EAAAC,cAAA,OAAKK,IAAK7C,KAAKJ,MAAMkD,QAASL,UAAU,cAAcM,IAAK/C,KAAKuB,KAAKyB,UACrEV,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAezC,KAAKuB,KAAK0B,MACtCjD,KAAKJ,MAAMsD,kBAjEoBC,iBA6E1CxD,EAAayD,aAAe,CAC1B3B,SAAU","file":"static/js/7.ab571a58.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport 'default-passive-events';\nimport checkProps from '@jam3/react-check-extra-props';\nimport { device, os } from '@jam3/detect';\n\nimport './RotateScreen.scss';\nimport { getCopy } from '../../data/get-site-data';\n\nexport default class RotateScreen extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      orientation: device.getOrientation()\n    };\n\n    this.copy = getCopy(this.props.language, 'rotate');\n  }\n\n  componentDidMount() {\n    this.setOrientationParentClass();\n\n    if (os.isAndroid) {\n      window.addEventListener('orientationchange', this.handleOrientationChange);\n    } else {\n      window.addEventListener('resize', this.handleOrientationChange);\n    }\n\n    this.container.addEventListener('touchmove', this.preventScrolling, { passive: false });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.orientation !== prevState.orientation) {\n      this.setOrientationParentClass();\n    }\n  }\n\n  componentWillUnmount() {\n    if (os.isAndroid) {\n      window.removeEventListener('orientationchange', this.handleOrientationChange);\n    } else {\n      window.removeEventListener('resize', this.handleOrientationChange);\n    }\n    this.container.removeEventListener('touchmove', this.preventScrolling);\n  }\n\n  preventScrolling = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  setOrientationParentClass = (orientation = this.state.orientation) => {\n    orientation === 'landscape'\n      ? document.body.classList.add('rotate-screen-visible')\n      : document.body.classList.remove('rotate-screen-visible');\n  };\n\n  handleOrientationChange = () => {\n    if (device.getOrientation() !== this.state.orientation) {\n      this.setState({ orientation: device.getOrientation() });\n    }\n  };\n\n  render() {\n    const visible = this.state.orientation === 'landscape';\n    const style = {\n      visibility: visible ? 'visible' : 'hidden'\n    };\n\n    return (\n      <div className={classnames('RotateScreen', this.props.className)} style={style} ref={r => (this.container = r)}>\n        <div className=\"container\">\n          {<img src={this.props.iconSrc} className=\"rotate-icon\" alt={this.copy.iconAlt} />}\n          {<p className=\"rotate-text\">{this.copy.text}</p>}\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n}\n\nRotateScreen.propTypes = checkProps({\n  language: PropTypes.string,\n  iconSrc: PropTypes.string\n});\n\nRotateScreen.defaultProps = {\n  language: 'en'\n};\n"],"sourceRoot":""}