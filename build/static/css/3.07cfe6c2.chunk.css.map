{"version":3,"sources":["E:/projects/fakeArtits/live4ever/src/pages/Gallery/E:/projects/fakeArtits/live4ever/src/pages/Gallery/E:/projects/fakeArtits/live4ever/src/pages/Gallery/Gallery.scss","E:/projects/fakeArtits/live4ever/src/pages/Gallery/E:/projects/fakeArtits/live4ever/src/pages/Gallery/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/pages/Gallery/E:/projects/fakeArtits/live4ever/src/pages/Gallery/E:/projects/fakeArtits/live4ever/src/style/mixins.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/AdBanner.scss","E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/components/AdBanner/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/pages/Home/E:/projects/fakeArtits/live4ever/src/pages/Home/E:/projects/fakeArtits/live4ever/src/pages/Home/Home.scss","E:/projects/fakeArtits/live4ever/src/pages/Home/E:/projects/fakeArtits/live4ever/src/pages/Home/E:/projects/fakeArtits/live4ever/src/style/vars.scss","E:/projects/fakeArtits/live4ever/src/pages/Home/E:/projects/fakeArtits/live4ever/src/pages/Home/E:/projects/fakeArtits/live4ever/src/style/mixins.scss"],"names":[],"mappings":"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","file":"3.07cfe6c2.chunk.css","sourcesContent":["@import 'src/style/shared.scss';\n\n.Gallery {\n  position: relative;\n  float: left;\n  width: 100%;\n  background-color: transparent;\n  z-index: 50;\n  color: $green;\n  padding: px-to-rem(20) $navbar-padding-mobile;\n\n  @media (min-width: $layout-large) {\n    padding: px-to-rem(20) $navbar-padding-desktop;\n  }\n\n  &-container {\n    position: relative;\n    float: left;\n    width: 100%;\n    margin: px-to-rem(80) 0 0 0;\n    border: 1px $green solid;\n    padding: px-to-rem(20);\n    background-color: $blacktint;\n\n    @media (min-width: $layout-large) {\n      padding: px-to-rem(30);\n    }\n  }\n\n  &-header {\n    position: relative;\n    float: left;\n    width: 100%;\n\n    h1 {\n      @include title;\n    }\n  }\n\n  &-content {\n    position: relative;\n    float: left;\n    width: 100%;\n\n    .gallery-list {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n      gap: px-to-rem(10);\n      grid-auto-flow: dense;\n\n      .gallery-item {\n        flex: 1;\n        padding: px-to-rem(10);\n        text-decoration: none;\n        color: $white;\n        @include font-regular();\n        background-color: $blacktint;\n\n        &:hover {\n          background-color: $greentint;\n        }\n\n        a {\n          text-decoration: none;\n        }\n\n        img {\n          width: 100%;\n        }\n\n        .gallery-item-title {\n          font-size: px-to-rem(14);\n          margin-bottom: px-to-rem(20);\n        }\n\n        .gallery-item-info-title {\n          font-size: px-to-rem(10);\n          margin: 0;\n        }\n\n        .gallery-item-info-bid {\n          font-size: px-to-rem(24);\n          color: $green;\n          margin: 0;\n        }\n\n        .gallery-item-info-button {\n          @include item-button;\n          width: 100%;\n          margin-top: px-to-rem(20);\n        }\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 300;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'StalinistOne', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'SquadaOne', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $greentint-dark;\n    color: $green;\n\n    a {\n      color: $green;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(13) px-to-rem(35);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $black;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  &.active:hover {\n    cursor: pointer;\n    background-color: $greentint-dark;\n    color: $green;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n","@import 'src/style/shared.scss';\n\n.Adbanner {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  z-index: 900;\n\n  .Adbanner-header {\n    position: relative;\n    float: left;\n    width: 100%;\n    height: 30px;\n    border-bottom: 1px solid $green;\n    background: $black;\n\n    ul {\n      position: relative;\n      float: left;\n      width: 100%;\n      height: 100%;\n\n      li {\n        position: relative;\n        float: right;\n        height: 100%;\n        width: 30px;\n        border-bottom: 2px solid $gray;\n        border-right: 2px solid $gray;\n        border-top: 2px solid $green;\n        border-left: 2px solid $green;\n        cursor: pointer;\n        background: $black;\n        color: $green;\n        font-size: 18px;\n        text-align: center;\n        vertical-align: middle;\n        user-select: none;\n\n        &.Adbanner-header-windows {\n          &:before {\n            position: absolute;\n            content: '';\n            border: 2px solid $gray;\n            width: 16px;\n            height: 12px;\n            left: 7px;\n            top: 5px;\n            z-index: 901;\n          }\n          &:after {\n            position: absolute;\n            content: '';\n            border: 2px solid $green;\n            width: 16px;\n            height: 12px;\n            left: 5px;\n            top: 7px;\n            z-index: 902;\n          }\n        }\n\n        &.Adbanner-header-close {\n          line-height: 26px;\n        }\n\n        &:hover {\n          background: $greentint-dark;\n          color: $green;\n\n          &:after {\n            border: 2px solid $green;\n          }\n        }\n      }\n    }\n  }\n\n  .Adbanner-content {\n    position: relative;\n    float: left;\n    width: 100%;\n    height: calc(100% - 30px);\n    background-position: center center;\n    overflow: hidden;\n    cursor: pointer;\n    background: $black;\n    color: $green;\n\n    img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      object-position: center center;\n      min-height: 100%;\n      min-width: 100%;\n    }\n\n    canvas {\n      width: 100%;\n      height: 100%;\n      object-fit: none;\n      object-position: center;\n      min-height: 100%;\n      min-width: 100%;\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n","@import 'src/style/shared.scss';\n\n.Home {\n  position: relative;\n  float: left;\n  text-align: center;\n  padding: px-to-rem(20) $navbar-padding-mobile;\n  z-index: 50;\n\n  @media (min-width: $layout-large) {\n    padding: px-to-rem(20) $navbar-padding-desktop;\n  }\n\n  &-header {\n    position: relative;\n    float: left;\n    width: 100%;\n    margin: px-to-rem(40) 0 0 0;\n    background-color: transparent;\n    padding: px-to-rem(20) 0;\n    color: $green;\n\n    .home-header-wrapper {\n      display: grid;\n      grid-template-columns: 1fr 30vw;\n      grid-template-rows: 330px 330px;\n      grid-gap: 20px;\n      height: 100%;\n    }\n\n    .home-header-box {\n      border: 1px $green solid;\n      box-sizing: border-box;\n      color: $green;\n      background-color: $blacktint;\n\n      &.big {\n        grid-column: 1 / 2;\n        grid-row: 1 / 3;\n        padding: px-to-rem(20) $navbar-padding-mobile;\n        box-sizing: border-box;\n\n        @media (min-width: $layout-large) {\n          padding: px-to-rem(30) $navbar-padding-desktop;\n        }\n\n        h1 {\n          @include title;\n        }\n\n        .box-info {\n          position: relative;\n          float: left;\n          width: 100%;\n          height: 500px;\n          box-sizing: border-box;\n\n          .box-info-image {\n            position: relative;\n            float: left;\n            width: 30%;\n            height: 100%;\n            background-position: center center;\n            overflow: hidden;\n\n            img {\n              width: 100%;\n              height: 100%;\n              object-fit: cover;\n              object-position: center;\n              min-height: 100%;\n              min-width: 100%;\n            }\n          }\n\n          .box-info-data {\n            position: relative;\n            float: left;\n            width: 70%;\n            padding: 0 px-to-rem(20) 0 px-to-rem(20);\n\n            h2 {\n              position: relative;\n              float: left;\n              width: 100%;\n              font-weight: 100;\n              text-align: left;\n              box-sizing: border-box;\n              margin: 0;\n            }\n\n            p {\n              position: relative;\n              float: left;\n              width: 100%;\n              color: $white;\n              text-align: left;\n              font-size: px-to-rem(10);\n              margin: 0;\n            }\n\n            .box-info-status-top {\n              position: relative;\n              float: left;\n              width: 100%;\n              margin-top: 100px;\n\n              ul {\n                position: relative;\n                float: left;\n                width: 100%;\n\n                li {\n                  position: relative;\n                  float: left;\n                  width: 50%;\n                  height: 160px;\n                  box-sizing: border-box;\n\n                  ul {\n                    position: relative;\n                    float: left;\n                    width: 100%;\n\n                    li {\n                      position: relative;\n                      float: left;\n                      width: 33.333%;\n                      height: auto;\n\n                      text-align: left;\n                    }\n                  }\n                }\n\n                li:last-child {\n                  border-left: 1px solid $white;\n                  padding-left: px-to-rem(20);\n\n                  ul {\n                    li {\n                      border-left: none;\n                      padding-left: 0;\n                    }\n                  }\n                }\n              }\n\n              .box-info-status-top-title {\n                margin-bottom: px-to-rem(20);\n              }\n\n              .box-info-status-top-bid {\n                font-size: px-to-rem(24);\n                color: $green;\n                margin: 0;\n              }\n\n              .box-info-status-top-counter {\n                font-size: px-to-rem(24);\n                color: $green;\n              }\n\n              .box-info-status-info {\n                position: relative;\n                float: left;\n                width: 100%;\n                margin-top: 50px;\n                color: $gray;\n                text-align: left;\n                font-size: px-to-rem(10);\n              }\n            }\n\n            .box-info-status-bottom {\n              position: relative;\n              float: left;\n              width: 100%;\n              margin-top: 110px;\n\n              button {\n                position: relative;\n                float: left;\n                @include main-button;\n                width: 45%;\n\n                &.cta {\n                  position: relative;\n                  float: left;\n                  width: 50%;\n                  @include main-button-cta;\n                  margin: 0 px-to-rem(20) px-to-rem(20) 0;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      &.small-top {\n        grid-column: 2 / 2;\n        grid-row: 1;\n      }\n\n      &.small-bottom {\n        grid-column: 2 / 2;\n        grid-row: 2;\n      }\n    }\n  }\n\n  &-galery {\n    position: relative;\n    float: left;\n    width: 100%;\n    box-sizing: border-box;\n    background-color: transparent;\n    background-color: $blacktint;\n\n    &.Gallery {\n      padding: px-to-rem(20);\n      border: 1px $green solid;\n\n      @media (min-width: $layout-large) {\n        padding: px-to-rem(30);\n      }\n\n      .Gallery-container {\n        background-color: transparent;\n        border: none;\n        margin: 0;\n        padding: 0;\n\n        @media (min-width: $layout-large) {\n          padding: 0;\n        }\n      }\n    }\n  }\n}\n","@import 'layout.scss';\n\n$base-image-path: '../../assets/images/';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-medium: map-get($layout, medium) + px;\n$layout-large: map-get($layout, large) + px;\n$layout-xlarge: map-get($layout, xlarge) + px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$blacktint: rgba(0, 0, 0, 0.8);\n$green: #42ff00;\n$greentint: rgba(#42ff00, 0.1);\n$greentint-dark: rgba(#42ff00, 0.3);\n$pink: #fa00ff;\n$gray: rgba(255, 255, 255, 0.3);\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $white;\n$rotate-screen-bg-color: $black;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: px-to-rem(130);\n$navbar-height-desktop: px-to-rem(130);\n$navbar-padding-mobile: 2rem;\n$navbar-padding-desktop: 4rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, page-overlay, main-nav, sidebar, preloader, rotate, footer, footer-nav;\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars.scss';\n\n/// Set Light Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-light();\n///   }\n@mixin font-light() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 300;\n}\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-regular();\n///   }\n@mixin font-regular() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 400;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-bold() {\n  font-family: 'Aldrich', #{$generic-fonts};\n  font-weight: 500;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-title() {\n  font-family: 'StalinistOne', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Set Bold Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-bold();\n///   }\n@mixin font-h1() {\n  font-family: 'SquadaOne', #{$generic-fonts};\n  font-weight: 100;\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: pxToRem(200);\n///   }\n@function px-to-rem($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  color: inherit;\n}\n\n@mixin title {\n  margin: px-to-rem(0) 0 px-to-rem(30) 0;\n  @include font-title;\n  color: $pink;\n  font-size: px-to-rem(24);\n  line-height: px-to-rem(20);\n  text-align: left;\n  box-sizing: border-box;\n}\n\n@mixin main-button {\n  background-color: transparent;\n  padding: px-to-rem(13) px-to-rem(35);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $greentint-dark;\n    color: $green;\n\n    a {\n      color: $green;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin main-button-cta {\n  background-color: $green;\n  padding: px-to-rem(13) px-to-rem(35);\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $black;\n\n  a {\n    color: $green;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background-color: $pink;\n    color: $black;\n    border: 1px $pink solid;\n\n    a {\n      color: $black;\n    }\n  }\n\n  a.active {\n    text-decoration: none;\n  }\n}\n\n@mixin item-button {\n  text-transform: uppercase;\n  padding: px-to-rem(3) px-to-rem(3);\n  background-color: transparent;\n  border: 1px $green solid;\n  box-sizing: border-box;\n  color: $green;\n\n  &.active:hover {\n    cursor: pointer;\n    background-color: $greentint-dark;\n    color: $green;\n  }\n\n  &.active {\n    text-decoration: none;\n  }\n}\n"]}